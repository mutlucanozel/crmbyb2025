@model IEnumerable<crm.Models.UserViewModel>
    @{

 
    var isYonetici = User.IsInRole("Yönetici");
    
    
    ViewData["Title"] = "";
    }
    @functions {
        public string FormatPhoneNumber(string phoneNumber)
        {
            if (string.IsNullOrEmpty(phoneNumber))
            {
                return ""; // Eğer numara boşsa boş dön
            }
    
            phoneNumber = phoneNumber.Replace(" ", "").Replace("-", ""); // Boşlukları ve çizgileri temizle
    
            // Numaranın sadece sayılardan oluştuğuna emin olun
            phoneNumber = new string(phoneNumber.Where(char.IsDigit).ToArray());
    
            if (phoneNumber.Length == 11) // Türk telefon numarası uzunluğunda mı kontrol et
            {
                return $"0{phoneNumber.Substring(1, 3)} {phoneNumber.Substring(4, 3)} {phoneNumber.Substring(7, 2)} {phoneNumber.Substring(9, 2)}";
            }
            return phoneNumber; // Eğer numara 11 haneli değilse olduğu gibi döndür
        }
    }
    
    <head>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/inputmask/5.0.7/inputmask.min.js"></script>
    </head>
    <div class="container ">
        <h4 class="display-4 text-center">Kullanıcı Listesi</h4>
        <hr>
        <button class="btn btn-outline-dark mb-3 btn-lg" data-toggle="modal" data-target="#addUserModal">
            Kullanıcı Ekle <i class="fa-solid fa-user-plus"></i>
        </button>
        <div class="table-responsive">
            <table class="user-table table table-bordered">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Ad</th>
                        <th>Soyad</th>
                        <th>E-Posta</th>
                        <th>Telefon Numarası</th>
                        <th>Roller</th>
                        <th>Profil Resmi</th>
                        <th>Durum</th>
                    </tr>
                </thead>
                <tbody id="userTableBody">

                    @foreach (var user in Model)
                    {
                        <tr id="userRow_@user.Id">
                        <td>@user.Id</td>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Email</td>
                        <td>@FormatPhoneNumber(user.PhoneNumber)</td>
                        <td>
                            <div class="label-container">
                                @foreach (var role in user.Roles)
                                {
                                    <div class="label-item"><span>@role</span></div>
                                }
                            </div>
                            
                        </td>
                        <td>
                            <img src="@user.ProfilePicturePath" alt="Profil Resmi" style="width:50px; height:50px;" />
                        </td>
                        <td>
                            <button class="btn btn-outline-success" 
                            data-toggle="modal" 
                            data-target="#editUserModal"
                            data-id="@user.Id" 
                            data-firstname="@user.FirstName" 
                            data-lastname="@user.LastName"
                            data-email="@user.Email" 
                            data-roles="@string.Join(" ,", user.Roles)" 
                            data-profilepicturepath="@user.ProfilePicturePath" 
                            data-phone="@user.PhoneNumber"
                            data-password="@user.Password"> <!-- Şifreyi buraya ekliyoruz -->
                        <i class="fa fa-pencil"></i>
                    </button>
                    
                    @if (isYonetici)
                    {
                            <button class="btn btn-outline-danger" onclick="deleteUser(@user.Id)">
                                <i class="fa fa-trash"></i>
                            </button>
                        }
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <!-- Add User Modal -->
    <div class="modal fade" id="addUserModal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel"
        aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title" id="addUserModalLabel">Kullanıcı Ekle</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-y: auto;">
                    <form id="addUserForm" class="needs-validation" enctype="multipart/form-data" novalidate>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="firstName" style="color: rgb(171, 34, 34);">Ad</label>
                                <input type="text" class="form-control" id="firstName" name="firstName" required>
                                <div class="invalid-feedback">Lütfen adınızı girin.</div>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="lastName" style="color: rgb(171, 34, 34);">Soyad</label>
                                <input type="text" class="form-control" id="lastName" name="lastName" required>
                                <div class="invalid-feedback">Lütfen soyadınızı girin.</div>
                            </div>


                            <div class="form-group col-md-6">
                                <label for="email" style="color: rgb(171, 34, 34);">E-Posta</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                                <div class="invalid-feedback">Lütfen geçerli bir e-posta adresi girin.</div>
                            </div>

                            <div class="form-group col-md-6">
                                <label for="password" style="color: rgb(171, 34, 34);">Şifre</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="password" name="password" required>
                                    <div class="input-group-append">
                                        <span class="input-group-text" onclick="togglePasswordVisibility()" style="cursor: pointer;">
                                            <i class="fa fa-eye" id="eyeIcon"></i>
                                        </span>
                                    </div>
                                </div>
                                <div class="invalid-feedback">Lütfen şifrenizi girin.</div>
                            </div>
                            





                            <div class="form-group col-md-6">
                                <label for="newRole">Yeni Rol Ekle</label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="newRole" placeholder="Yeni Rol Girin">
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-outline-primary"
                                            id="addRoleBtn">Ekle</button>
                                    </div>
                                </div>

                            </div>
                            <div class="form-group col-md-6 ">
                                <label for="PhoneNumber">Telefon</label>
                                <input type="tel" class="form-control" id="PhoneNumber" name="PhoneNumber" pattern="\d*"
                                    title="Sadece rakamlar girilebilir." >
                                <div class="invalid-feedback">Lütfen sadece rakamları girin.</div>
                            </div>

                            <div class="form-group col-md-6 ">
                                <label for="roles" style="color: rgb(171, 34, 34);">Roller</label>
                                <div id="rolesContainer">
                                    @foreach (var role in ViewBag.Roles as List<crm.Models.Role>)
                                        {
                                        <div class="form-check" id="role_@role.Id">
                                            <input class="form-check-input" type="checkbox" value="@role.Name"
                                                id="role_@role.Name" name="selectedRoles">
                                            <label class="form-check-label" for="role_@role.Name">@role.Name</label>
                                            <button type="button" class="btn btn-outline-danger btn-sm delete-role-btn"
                                                data-role-id="@role.Id">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                        }
                                </div>
                                <img id="profilePicturePreview" src="#" alt="Profil Resmi Önizleme"
                                    style="display:none; margin-top:10px; max-width:200px;" />
                            </div>
                            <div class="form-group">
                                <label for="profilePicture">Profil Resmi (Opsiyonel)</label>
                                <div class="custom-file">
                                    <input type="file" class="custom-file-input" id="profilePicture"
                                    name="profilePicture" accept=".jpg, .jpeg, .png, .gif">
                                    <label class="custom-file-label" for="profilePicture">Dosya seçin...</label>
                                </div>

                            </div>

                            <label for="" style="color: rgb(171, 34, 34);">**Girilmesi zorunlu alanlar kırmızı ile
                                işaretlenmiştir. </label>
                            <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Ekle <i class="fa fa-check"
                                    aria-hidden="true"></i></button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" role="dialog" aria-labelledby="editUserModalLabel"
        aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title" id="editUserModalLabel">Kullanıcıyı Düzenle</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm" class="needs-validation" enctype="multipart/form-data" novalidate>
                        <input type="hidden" id="editUserId" name="id">
                        <div class="form-group">
                            <label for="editFirstName">Ad</label>
                            <input type="text" class="form-control" id="editFirstName" name="firstName" required>
                            <div class="invalid-feedback">Lütfen adınızı girin.</div>
                        </div>
                        <div class="form-group">
                            <label for="editLastName">Soyad</label>
                            <input type="text" class="form-control" id="editLastName" name="lastName" required>
                            <div class="invalid-feedback">Lütfen soyadınızı girin.</div>
                        </div>
                        <div class="form-group">
                            <label for="editEmail">E-Posta</label>
                            <input type="email" class="form-control" id="editEmail" name="email" required>
                            <div class="invalid-feedback">Lütfen geçerli bir e-posta adresi girin.</div>
                        </div>
                        <div class="form-group">
                            <div class="form-group">
                                <label for="editPassword">Yeni Şifre</label>
                                <input type="" class="form-control" id="editPassword" name="Password" placeholder="Yeni Şifre">
                            </div>
                      

                        <div class="form-group">
                            <label for="editPhoneNumber">Telefon Numarası </label>
                            <input type="email" class="form-control" id="editPhoneNumber" name="PhoneNumber">
                            <div class="invalid-feedback">Lütfen geçerli bir telefon numarası girin.</div>
                        </div>
                        <div class="form-group">
                            <label for="editRoles">Roller</label>
                            <div id="rolesContainerEdit">
                                @foreach (var role in ViewBag.Roles as List<crm.Models.Role>)
                                    {
                                    <div class="form-check" id="role_@role.Id">
                                        <input class="form-check-input" type="checkbox" value="@role.Name"
                                            id="editRole_@role.Name" name="selectedRoles">
                                        <label class="form-check-label" for="editRole_@role.Name">@role.Name</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm delete-role-btn"
                                            data-role-id="@role.Id">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                    }
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="newRoleEdit">Yeni Rol Ekle</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="newRoleEdit" placeholder="Yeni Rol Girin">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-outline-primary"
                                        id="addRoleBtnEdit">Ekle</button>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" id="existingProfilePicturePath" name="existingProfilePicturePath" value="">

<div class="form-group">
    <label for="editProfilePicture">Profil Resmi</label>
    <div class="custom-file">
        <input type="file" class="custom-file-input" id="editProfilePicture" 
            name="profilePicture" accept=".jpg, .jpeg, .png, .gif">
        <div style="display: flex; justify-content: center; align-items: center; height: 10vh;">
            <img id="profilePicturePreview" src="" alt="Profil Resmi"
                style="width: 80px; height: 80px; display: none; object-fit: cover;" />
        </div>
        <label class="custom-file-label" for="editProfilePicture">Dosya seçin...</label>
    </div>
</div>

                        
                        
                        

                        <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                                aria-hidden="true"></i></button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/inputmask/5.0.7/inputmask.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>  
    document.getElementById('editProfilePicture').addEventListener('change', function(event) {
    const input = event.target;
    const preview = document.getElementById('profilePicturePreview');
    const file = input.files[0];

    if (file) {
        const fileTypes = ['image/jpeg', 'image/png', 'image/gif'];

        // Dosya türü kontrolü
        if (!fileTypes.includes(file.type)) {
            alert('Yalnızca .jpg, .jpeg, .png veya .gif formatında dosyalar yükleyebilirsiniz.');
            input.value = ''; // Geçersiz dosyayı temizle
            preview.style.display = 'none';
            preview.src = ''; // Önizleme alanını temizle
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            preview.src = e.target.result; // Yeni dosyayı önizleme alanına yükle
            preview.style.display = 'block'; // Önizlemeyi göster
        };
        reader.readAsDataURL(file); // Dosyayı oku ve yükle
    } else {
        // Dosya seçilmediyse önizlemeyi gizle
        preview.style.display = 'none';
        preview.src = ''; // Önizleme alanını temizle
    }
});

    
    function deleteUser(userId) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu kullanıcıyı silmek istediğinizden emin misiniz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'Hayır, iptal et'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                url: '@Url.Action("DeleteUser", "Account")/' + userId,
                type: 'POST',
                success: function (result) {
                    if (result.success) {
                        // Silme işlemi başarılı olduğunda sessionStorage'a bir bayrak ekliyoruz
                        sessionStorage.setItem("userDeleted", "true");
                        location.reload(); // Sayfayı yeniliyoruz
                    } else {
                        Toastify({
                            text: result.message,
                            duration: 3000,
                            gravity: "top",
                            position: "center",
                            backgroundColor: "#FF0000", // Kırmızı renk başarısız işlem için
                            className: "toast-error",
                            stopOnFocus: true,
                        }).showToast();
                    }
                },
                error: function (err) {
                    Toastify({
                        text: "Kullanıcı silme işlemi sırasında bir hata oluştu. Silme yetkiniz olduğundan emin olun!",
                        duration: 3000,
                        gravity: "top",
                        position: "center",
                        backgroundColor: "#FF0000",
                        className: "toast-error",
                        stopOnFocus: true,
                    }).showToast();
                }
                    });
                }
            });
        }function togglePasswordVisibility() {
    var passwordField = document.getElementById("password");
    var eyeIcon = document.getElementById("eyeIcon");

    if (passwordField.type === "password") {
        passwordField.type = "text";
        eyeIcon.classList.remove("fa-eye");
        eyeIcon.classList.add("fa-eye-slash");
    } else {
        passwordField.type = "password";
        eyeIcon.classList.remove("fa-eye-slash");
        eyeIcon.classList.add("fa-eye");
    }
}

// Sayfa yüklendiğinde kontrol yapıyoruz
$(document).ready(function () {
    // sessionStorage'daki userDeleted bayrağını kontrol ediyoruz
    if (sessionStorage.getItem("userDeleted") === "true") {
        // Toastify ile başarı mesajını gösteriyoruz
        Toastify({
            text: "Kullanıcı başarıyla silindi 🥳",
            duration: 3000,
            gravity: "top", // Toast konumu: "top" veya "bottom"
            position: "center", // Toast konumu: "left", "center" veya "right"
            backgroundColor: "#4CAF50", // Yeşil renk başarılı işlem için
            className: "toast-success",
            stopOnFocus: true, // Mouse ile üzerine gelindiğinde kapanmayı durdur
        }).showToast();

        // Toastify mesajı gösterildikten sonra bayrağı temizliyoruz
        sessionStorage.removeItem("userDeleted");
    }
});
        
        document.addEventListener('DOMContentLoaded', function () {
            var phoneNumberInput = document.querySelector("#PhoneNumber");

// Initialize intl-tel-input
var iti = window.intlTelInput(phoneNumberInput, {
    initialCountry: "tr",  // Set default country to Turkey
    utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
});

// Prevent non-numeric input
phoneNumberInput.addEventListener('keydown', function (event) {
    const allowedKeys = [
        "Backspace", "Delete", "Tab", "Escape", "Enter", 
        "ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown"
    ];

    // Allow control keys and prevent non-numeric input
    if (allowedKeys.includes(event.key)) {
        return; // Let these keys function normally
    }

    if (event.key < '0' || event.key > '9') {
        event.preventDefault(); // Block non-numeric characters
    }
});

// Ensure phone number starts with '0'
phoneNumberInput.addEventListener('input', function (e) {
    let cleanInput = e.target.value.replace(/\D/g, '').substring(0, 11); // Keep only digits
    let formattedInput = '0'; // Ensure first character is '0'

    if (cleanInput.startsWith('0')) {
        cleanInput = cleanInput.substring(1); // Remove duplicate '0' if present
    }

    if (cleanInput.length > 0) {
        formattedInput += ' ' + cleanInput.substring(0, 3); // First three digits
    }
    if (cleanInput.length > 3) {
        formattedInput += ' ' + cleanInput.substring(3, 6); // Next three digits
    }
    if (cleanInput.length > 6) {
        formattedInput += ' ' + cleanInput.substring(6, 8); // Next two digits
    }
    if (cleanInput.length > 8) {
        formattedInput += ' ' + cleanInput.substring(8, 10); // Last two digits
    }

    e.target.value = formattedInput; // Set formatted value back to input
});

// Prevent deletion of the first "0" character
phoneNumberInput.addEventListener('keydown', function (e) {
    if (e.target.selectionStart === 0 && (e.key === "Backspace" || e.key === "Delete")) {
        e.preventDefault(); // Prevent deletion of the first character
    }
});

// newRole alanı için baş harfleri büyük yapma
document.getElementById('newRole').addEventListener('input', function () {
    this.value = toTitleCase(this.value);
});

// newRoleEdit alanı için baş harfleri büyük yapma
document.getElementById('newRoleEdit').addEventListener('input', function () {
    this.value = toTitleCase(this.value);
});

// Baş harfleri büyük yapan fonksiyon
function toTitleCase(str) {
    return str.toLowerCase().replace(/\b\w/g, function (char) {
        return char.toUpperCase();
    });
}

            document.getElementById('firstName').addEventListener('input', function () {
                this.value = this.value.toLowerCase('tr-TR').replace(/(^|\s)\S/g, function (char) {
                    return char.toLocaleUpperCase('tr-TR');
                });
            });



            document.getElementById('lastName').addEventListener('input', function () {
                this.value = this.value.toUpperCase();
            });





            $(document).ready(function () {


                $('#addRoleBtn').click(function () {
                    var newRole = $('#newRole').val().trim();
                    if (newRole) {
                        $.ajax({
                            url: '@Url.Action("AddRole", "Account")',
                            type: 'POST',
                            data: { roleName: newRole },
                            success: function (result) {
                                if (result.success) {
                                    var newRoleId = 'role_' + newRole.replace(/\s+/g, '_');
                                    var newRoleCheckbox = `
                                    <div class="form-check" id="role_${result.role.id}">
                                        <input class="form-check-input" type="checkbox" value="${result.role.name}" id="${newRoleId}" name="selectedRoles" checked>
                                        <label class="form-check-label" for="${newRoleId}">${result.role.name}</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm delete-role-btn" data-role-id="${result.role.id}">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>`;
                                    $('#rolesContainer').append(newRoleCheckbox);
                                    $('#newRole').val('');
                                    Toastify({
                                        text: result.message,
                                        duration: 3000,
                                        gravity: "top",
                                        position: "center",
                                        backgroundColor: "#28a745"
                                    }).showToast();
                                } else {
                                    Toastify({
                                        text: result.message,
                                        duration: 3000,
                                        gravity: "top",
                                        position: "center",
                                        backgroundColor: "#dc3545"
                                    }).showToast();
                                }
                            }

                        });

                    }
                });

                $('#addRoleBtnEdit').click(function () {
                    var newRoleEdit = $('#newRoleEdit').val().trim();
                    if (newRoleEdit) {
                        $.ajax({
                            url: '@Url.Action("AddRole", "Account")',
                            type: 'POST',
                            data: { roleName: newRoleEdit },
                            success: function (result) {
                                if (result.success) {
                                    var newRoleEditId = 'role_' + newRoleEdit.replace(/\s+/g, '_');
                                    var newRoleEditCheckbox = `
                                    <div class="form-check" id="role_${result.role.id}">
                                        <input class="form-check-input" type="checkbox" value="${result.role.name}" id="${newRoleEditId}" name="selectedRoles" checked>
                                        <label class="form-check-label" for="${newRoleEditId}">${result.role.name}</label>
                                        <button type="button" class="btn btn-outline-danger btn-sm delete-role-btn" data-role-id="${result.role.id}">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>`;
                                    $('#rolesContainerEdit').append(newRoleEditCheckbox);
                                    $('#newRoleEdit').val('');
                                    Toastify({
                                        text: result.message,
                                        duration: 3000,
                                        gravity: "top",
                                        position: "center",
                                        backgroundColor: "#28a745"
                                    }).showToast();
                                } else {
                                    Toastify({
                                        text: result.message,
                                        duration: 3000,
                                        gravity: "top",
                                        position: "center",
                                        backgroundColor: "#dc3545"
                                    }).showToast();
                                }
                            }
                        });
                    }
                });
                $(document).ready(function () {
    $('#addUserForm').on('submit', function (e) {
        e.preventDefault();
        var formData = new FormData(this);
        var cleanPhoneNumber = $('#PhoneNumber').val().replace(/\D/g, ''); // Clean phone number for submission (remove spaces)
        $('#PhoneNumber').val(cleanPhoneNumber); // Update input value for submission

        $.ajax({
            url: '@Url.Action("NewUser", "Account")',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (result) {
                if (result.success) {
                    Toastify({
                        text: "Kullanıcı başarıyla eklendi.",
                        duration: 3000,
                        gravity: "top", // toast konumu: top veya bottom
                        position: "center", // toast konumu: left, center veya right
                        backgroundColor: "#4CAF50", // başarılı işlemler için yeşil renk
                        stopOnFocus: true // Toast kapatılana kadar göster
                    }).showToast();

                    setTimeout(function () {
                        location.reload();
                    }, 1000); // Sayfanın yeniden yüklenmesi için 1.5 saniye bekletme
                } else {
                    Toastify({
                        text: result.message,
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "center",
                        backgroundColor: "#ff0000", // hata durumları için kırmızı renk
                        stopOnFocus: true
                    }).showToast();
                }
            },
            error: function (err) {
                Toastify({
                    text: "Kullanıcı eklenirken bir hata oluştu, kullanıcı ekleme işlemi için yetkiniz olduğundan emin olun.",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "#ff0000", // hata durumları için kırmızı renk
                    stopOnFocus: true
                }).showToast();
            }
        });
    });
});


            });


            $('#editUserModal').on('show.bs.modal', function (event) {
    var button = $(event.relatedTarget);
    var userId = button.data('id');
    var userFirstName = button.data('firstname');
    var userLastName = button.data('lastname');
    var userEmail = button.data('email');
    var userPhoneNumber = button.data('phone');
    var userPassword = button.data('password'); // Şifreyi alıyoruz
    
    if (!userPhoneNumber || userPhoneNumber === "null") {
        userPhoneNumber = ""; // Eğer telefon numarası boş ya da null ise boş string olarak ayarla
    }

    var formattedPhoneNumber = formatPhoneNumber(userPhoneNumber);
    var modal = $(this);
    
    // Modal'a verileri yerleştiriyoruz
    modal.find('#editUserId').val(userId);
    modal.find('#editFirstName').val(userFirstName);
    modal.find('#editLastName').val(userLastName);
    modal.find('#editEmail').val(userEmail);
    modal.find('#editPhoneNumber').val(formattedPhoneNumber);
    
    modal.find('#editPassword').val(userPassword);

    var userRoles = button.data('roles');
    var userProfilePicturePath = button.data('profilepicturepath');
    var fileName = userProfilePicturePath ? userProfilePicturePath.split('/').pop() : "Dosya seçin...";

    modal.find('#existingProfilePicturePath').val(userProfilePicturePath);
    modal.find('.custom-file-label').html(fileName);

    if (userProfilePicturePath) {
        modal.find('#profilePicturePreview').attr('src', userProfilePicturePath).show();
    } else {
        modal.find('#profilePicturePreview').hide();
    }

    modal.find('input[name="selectedRoles"]').each(function () {
        var role = $(this).val();
        if (userRoles.includes(role)) {
            $(this).prop('checked', true);
        } else {
            $(this).prop('checked', false);
        }
    });
});

            // Telefon numarasını formatlama fonksiyonu
            function formatPhoneNumber(phoneNumber) {
                var input = phoneNumber.replace(/\D/g, '').substring(0, 11); // Sadece rakamları al ve maksimum 11 hane
                var formattedInput = '0'; // İlk basamak sabit "0"

                if (input.length > 1) {
                    formattedInput += ' ' + input.substring(1, 4); // İlk üç hane (0'dan sonra)
                }
                if (input.length > 4) {
                    formattedInput += ' ' + input.substring(4, 7); // Sonraki üç hane
                }
                if (input.length > 7) {
                    formattedInput += ' ' + input.substring(7, 9); // İki hane
                }
                if (input.length > 9) {
                    formattedInput += ' ' + input.substring(9, 11); // Son iki hane
                }

                return formattedInput;
            }
            $(".custom-file-input").on("change", function () {
                var fileName = $(this).val().split("\\").pop();
                $(this).siblings(".custom-file-label").addClass("selected").html(fileName);

                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#profilePicturePreview').attr('src', e.target.result).show();
                }
                reader.readAsDataURL(this.files[0]);
            });
          

            $(document).ready(function () {

                // editUserForm için form gönderme işlemi
                $('#editUserForm').on('submit', function (e) {
                    e.preventDefault();

                    // Formu göndermeden önce telefon numarasını temizliyoruz
                    var cleanPhoneNumber = $('#editPhoneNumber').val().replace(/\D/g, ''); // Sadece rakamlar kalacak şekilde temizle
                    $('#editPhoneNumber').val(cleanPhoneNumber);

                    var formData = new FormData(this);
                   $.ajax({
            url: '@Url.Action("EditUser", "Account")',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (result) {
                if (result.success) {
                    // Modal'ı kapatma
                    $('#editUserModal').modal('hide');
// Modal kapandıktan sonra modal-backdrop elementini kaldırma
$('#editUserModal').on('hidden.bs.modal', function () {
                                $('body').removeClass('modal-open'); // Body'den modal-open class'ını kaldırma
                                $('.modal-backdrop').remove(); // modal-backdrop elementini DOM'dan kaldırma
                            });

                    // Modal kapandıktan sonra toast göstermek için biraz gecikme ekliyoruz
                    setTimeout(function () {
                        Toastify({
                            text: "Kullanıcı başarıyla güncellendi 🥳",
                            duration: 5000,
                            gravity: "top", // Toast konumu: "top" veya "bottom"
                            position: "center", // Toast konumu: "left", "center" veya "right"
                            backgroundColor: "#4CAF50", // Yeşil renk başarılı işlem için
                            className: "toast-success",
                            stopOnFocus: true, // Mouse ile üzerine gelindiğinde kapanmayı durdur
                        }).showToast();
                    }, 50); // 500ms gecikme (modal kapanma animasyonu için)
                } else {
                    // Modal'ı kapatma
                    $('#editUserModal').modal('hide');

                    // Modal kapandıktan sonra toast göstermek için biraz gecikme ekliyoruz
                    setTimeout(function () {
                        Toastify({
                            text: result.message,
                            duration: 3000,
                            gravity: "top",
                            position: "center",
                            backgroundColor: "#FF0000", // Kırmızı renk başarısız işlem için
                            className: "toast-error",
                            stopOnFocus: true,
                        }).showToast();
                    }, 50); // 500ms gecikme
                    
                }
                location.reload();
            },
            error: function (err) {
                // Hata oluştuğunda toast mesajını doğrudan gösteriyoruz
                Toastify({
                    text: "Kullanıcı güncellenirken bir hata oluştu, güncelleme işlemi için yetkiniz olduğundan emin olun!",
                    duration: 3000,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "#FF0000",
                    className: "toast-error",
                    stopOnFocus: true,
                }).showToast();
            }
        });
                });

            });

            $(document).on('click', '.delete-role-btn', function () {
                var roleId = $(this).data('role-id');
                deleteRole(roleId);
            });
        });

        document.getElementById('editPhoneNumber').addEventListener('input', function (e) {
            var input = e.target.value.replace(/\D/g, '').substring(0, 11); // Sadece rakamları al ve maksimum 11 hane
            var formattedInput = '0'; // İlk basamak sabit "0"

            if (input.length > 1) {
                formattedInput += ' ' + input.substring(1, 4); // İlk üç hane (0'dan sonra)
            }
            if (input.length > 4) {
                formattedInput += ' ' + input.substring(4, 7); // Sonraki üç hane
            }
            if (input.length > 7) {
                formattedInput += ' ' + input.substring(7, 9); // İki hane
            }
            if (input.length > 9) {
                formattedInput += ' ' + input.substring(9, 11); // Son iki hane
            }

            e.target.value = formattedInput; // Formatlanmış girdiyi inputa yerleştir
        });

        function deleteRole(roleId) {
    $.ajax({
        url: '@Url.Action("DeleteRole", "Account")',
        type: 'POST',
        data: { roleId: roleId },
        success: function (result) {
            if (result.success) {
                // Silinen rol satırını tabloda kaldırma
                $('#role_' + roleId).remove();
                
                // Eğer tabloyu tamamen yenilemek istiyorsanız:
                refreshUserTable();

                Toastify({
                    text: result.message,
                    duration: 3000,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "#28a745"
                }).showToast();
            } else {
                Toastify({
                    text: result.message,
                    duration: 3000,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "#dc3545"
                }).showToast();
            }
        },
        error: function (xhr, status, error) {
            Toastify({
                text: "Rol silinirken bir hatayla karşılaşıldı. ⛔️",
                duration: 3000,
                gravity: "top",
                position: "center",
                backgroundColor: "#dc3545"
            }).showToast();
        }
    });
}

function refreshUserTable() {
    $.ajax({
        url: '@Url.Action("GetUserTablePartial", "Account")',
        type: 'GET',
        success: function (data) {
            // Verileri tabloya ekleyelim
            $('#userTableBody').html(data);
        },
        error: function (xhr, status, error) {
            console.log("Tablo yenilenirken hata oluştu.");
        }
    });
}


    </script>