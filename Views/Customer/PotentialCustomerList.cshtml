<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>M√º≈üteri Listesi</title>
    <link rel="stylesheet" type="text/css" href="~/css/listcustomer.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>

</head>

@using System.Security.Claims
@{
var firstName = System.Net.WebUtility.HtmlDecode(User.FindFirst("FirstName")?.Value ?? string.Empty);
var lastName = System.Net.WebUtility.HtmlDecode(User.FindFirst("LastName")?.Value ?? string.Empty);
bool isYetkili = User.IsInRole("Y√∂netici") || User.IsInRole("Denetlemeci");


ViewBag.UserName = $"{firstName} {lastName}";
}


    <div class="container">
        <h4 class="display-4 text-center">Potansiyel ‚ùì M√º≈üteri Listesi</h4>
        <hr>
        <div class="d-flex justify-content-between align-items-center mb-3" style="gap: 10px;">
            <input type="text" class="form-control search-input-custom" id="searchInput"
                placeholder="Herhangi bir parametre ile ara..." style="margin: 0; flex-grow: 1; height: 60px;">

        </div>
        <hr>
        <div class="button-container">
            <div class="button-group">
                @if (isYetkili)
                {
                <button class="btn btn-outline-dark mb-3 btn-lg" data-toggle="modal" data-target="#addCustomerModal">
                    Potansiyel M√º≈üteri Ekle <i class="fa-solid fa-user-plus"></i>
                </button>

                <button class="btn btn-outline-dark mb-3 btn-lg"
                    onclick="exportTableToExcel('user-table', 'MusteriListesi.xlsx')">
                    Tabloyu Excel'e Aktar <i class="fa-solid fa-download"></i>
                </button>
                }

            </div>
            <!-- <button class="btn btn-outline-dark mb-3 btn-lg" id="deleteSelected">
            Se√ßilen M√º≈üterileri Sil <i class="fa fa-trash"></i>
        </button> -->
        </div>
        <div class="table-header" style="text-align: center;">
            <h5 id="customerCount"
                style="font-size: 1.2em; font-weight: bold; color: #4F75FF; border: 2px solid #4379F2; display: inline-block; padding: 10px 20px; border-radius: 8px; background-color: #f0f8ff;">
                Listelenen Potansiyel M√º≈üterilerinizin Sayƒ±sƒ±: 0
            </h5>
        </div>
        <div class="table-responsive">
            <table id="user-table" class="user-table table table-bordered">

                <thead>
                    <tr>
                        <!-- <th><input type="checkbox" id="selectAll"></th> -->
                        <th>Id</th>
                        <th>Ad</th>
                        <th>ƒ∞l</th>
                        <th>ƒ∞l√ße</th>
                        <th>Randevu Tarihi</th>
                        <th>M√º≈üteri Sorumlusu</th>
                        <th>Durum </th>
                        <th>ƒ∞≈ülemler</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                    foreach (var customer in Model)
                    {
                    <tr>
                        <!-- <td><input type="checkbox" class="selectCustomer" data-id="@customer.Id"></td> -->
                        <td>@customer.Id</td>
                        <td>@customer.Name</td>
                        <td>@customer.City</td>
                        <td>@customer.District</td>
                        <td>@(customer.LastVisitActualDate?.ToString("dd.MM.yyyy") ?? "Hen√ºz ziyaret planlanmadƒ±")</td>
                        <td>@customer.CreatedBy</td>


                        <td>
                            @{
                                // Records listesini statik bir tipe d√∂n√º≈üt√ºr
                                var records = customer.Records as List<RecordViewModel>;
                            
                                // "Ziyaret" durumuna sahip kayƒ±tlarƒ± filtrele
                                bool anyZiyaretRecordHasActualDate = records != null && records.Any(record => 
                                    record.Status == "Ziyaret" && record.ActualDate != null);
                            
                                // Son kayƒ±t (herhangi bir kayƒ±t) Id'ye g√∂re belirle
                                var lastRecord = records?.OrderByDescending(r => r.Id).FirstOrDefault();
                            
                                // Son "Ziyaret" kaydƒ±nƒ± Id'ye g√∂re belirle
                                var lastZiyaretRecord = records?.Where(r => r.Status == "Ziyaret")
                                                                .OrderByDescending(r => r.Id)
                                                                .FirstOrDefault();
                            
                                string buttonClass = "btn btn-lg "; // Varsayƒ±lan buton sƒ±nƒ±fƒ±
                                string buttonText = ""; // G√∂sterilecek metin
                            
                                if (anyZiyaretRecordHasActualDate)
                                {
                                    buttonClass += "btn-success"; // Ye≈üil buton
                                    buttonText = "Ger√ßekle≈üti ‚úÖ";
                                }
                                else if (records == null || !records.Any())
                                {
                                    buttonClass += "btn-warning text-dark"; // Sarƒ± buton
                                    buttonText = "Eklendi ‚ö†Ô∏è";
                                }
                                else if (customer.IsOwned)
                                {
                                    buttonClass += "btn-primary"; // Mavi buton
                                    buttonText = "Sahiplenildi üÜó";
                                }
                                else if (lastZiyaretRecord != null)
                                {
                                    if (lastZiyaretRecord.Status == "Ziyaret")
                                    {
                                        buttonClass += "btn-info text-white"; // A√ßƒ±k mavi buton
                                        buttonText = "Randevu olu≈üturuldu üóìÔ∏è";
                                    }
                                    else
                                    {
                                        buttonClass += "btn-secondary"; // Gri buton
                                        buttonText = $"{lastZiyaretRecord.Status} kaydƒ± eklendi.";
                                    }
                                }
                                else if (lastRecord != null)
                                {
                                    buttonClass += "btn-info"; // Kƒ±rmƒ±zƒ± buton
                                    buttonText = $"{lastRecord.Status} kaydƒ± eklendi.";
                                }
                                else
                                {
                                    buttonClass += "btn-info"; // Kƒ±rmƒ±zƒ± buton
                                    buttonText = "Hi√ßbir kayƒ±t yok.";
                                }
                            }
                            
                            <button class="@buttonClass">
                                @buttonText
                            </button>
                            
                        </td>






                        <!-- Table Cell -->
                        <td style="text-align: center; vertical-align: middle;">
                            <!-- Button Element -->
                            <a class="btn btn-dark" href="@Url.Action("PotentialCustomerDetail","Customer" , new {
                                id=customer.Id })"
                                style="display: inline-flex; justify-content: center; align-items: center; width: 60px; height: 60px;">
                                <i class='fas fa-sign-in-alt' style="font-size: 24px; margin: 0;"></i>
                            </a>
                        </td>

                    </tr>
                    }
                    }
                    else
                    {
                    <tr>
                        <td colspan="8">Veri y√ºklenemedi</td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
        <hr>
    </div>

    <!-- Add Customer Modal -->
    <div class="modal fade" id="addCustomerModal" tabindex="-1" role="dialog" aria-labelledby="addCustomerModalLabel"
        aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title" id="addCustomerModalLabel">M√º≈üteri Ekle</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addPotentialCustomerForm" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()

                        <div class="form-group">
                            <label for="name">Firma Adƒ±</label>
                            <input type="text" class="form-control" id="name" name="Name" required>
                            <div class="invalid-feedback">L√ºtfen firma adƒ±nƒ± girin.</div>
                        </div>


                        <div class="form-group">
                            <label for="images">Resimler</label>
                            <input type="file" class="form-control" id="images" name="UploadedImages" accept="image/*"
                                capture="camera" multiple>

                        </div>


                        <div class="form-group">
                            <label for="CreatedBy">M√º≈üteri Sorumlusu</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="CreatedBy" name="CreatedBy" readonly
                                    value="@Html.Raw(ViewBag.UserName)">
                                <div class="input-group-append">
                                    <span class="input-group-text"><i class="fa fa-handshake"
                                            aria-hidden="true"></i></span>
                                </div>
                            </div>
                        </div>

                        <input type="hidden" name="IsPotential" value="true">

                        <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">
                            Potansiyel M√º≈üteri Ekle <i class="fa fa-check" aria-hidden="true"></i>
                        </button>
                    </form>

                </div>
            </div>
        </div>
    </div>





    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const table = document.getElementById("user-table");
            const headers = table.querySelectorAll("thead th");
            const tbody = table.querySelector("tbody");
            let currentSortColumn = null;
            let currentSortOrder = "asc";

            headers.forEach((header, index) => {
                header.addEventListener("click", function () {
                    // √ñnce t√ºm s√ºtunlardan aktif sƒ±nƒ±fƒ± ve ikonlarƒ± kaldƒ±r.
                    headers.forEach(h => {
                        h.classList.remove("active");
                        const icon = h.querySelector(".sort-icon");
                        if (icon) icon.remove();
                    });

                    // ≈ûimdiki s√ºtuna aktif sƒ±nƒ±fƒ± ekle.
                    header.classList.add("active");

                    // Sƒ±ralama y√∂n√ºn√º deƒüi≈ütir veya varsayƒ±lan olarak "asc" yap.
                    if (currentSortColumn === index) {
                        currentSortOrder = currentSortOrder === "asc" ? "desc" : "asc";
                    } else {
                        currentSortColumn = index;
                        currentSortOrder = "asc";
                    }

                    // Sƒ±ralama ikonunu ekle.
                    const sortIcon = document.createElement("span");
                    sortIcon.classList.add("sort-icon");
                    sortIcon.innerHTML = currentSortOrder === "asc" ? "‚ñ≤" : "‚ñº";
                    header.appendChild(sortIcon);

                    // Satƒ±rlarƒ± sƒ±ralama.
                    const isDateColumn = header.innerText.includes("Randevu Tarihi");
                    const rows = Array.from(tbody.querySelectorAll("tr"));

                    rows.sort((rowA, rowB) => {
                        const cellA = rowA.children[index].innerText.trim();
                        const cellB = rowB.children[index].innerText.trim();

                        if (isDateColumn) {
                            const dateA = new Date(cellA.split('.').reverse().join('-'));
                            const dateB = new Date(cellB.split('.').reverse().join('-'));
                            return currentSortOrder === "asc" ? dateA - dateB : dateB - dateA;
                        } else {
                            return currentSortOrder === "asc"
                                ? cellA.localeCompare(cellB, 'tr')
                                : cellB.localeCompare(cellA, 'tr');
                        }
                    });

                    rows.forEach(row => tbody.appendChild(row));
                });
            });
        });
        $('#addPotentialCustomerForm').on('submit', function (e) {
            e.preventDefault();
            var formData = new FormData(this);

            $.ajax({
                url: '/Customer/AddPotentialCustomer',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,

                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Potansiyel m√º≈üteri ba≈üarƒ±yla eklendi",
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "green", // Ba≈üarƒ± ye≈üil rengi
                            close: false
                        }).showToast(); setTimeout(function () {
                            location.reload();
                        }, 2000);

                        // Formu sƒ±fƒ±rla
                        $('#addPotentialCustomerForm')[0].reset();
                    } else if (response.message.includes('Bu isimle ba≈ülayan mevcut firmalar')) {
                        // Benzer isimli m√º≈üteriler var ise Swal ile onay penceresi g√∂ster
                        Swal.fire({
                            title: 'Benzer ƒ∞simli M√º≈üteri Mevcut!',
                            text: response.message,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Evet, Ekle',
                            cancelButtonText: 'Hayƒ±r, ƒ∞ptal Et'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                formData.append('ForceAdd', true); // ForceAdd parametresini ekle
                                $.ajax({
                                    url: '/Customer/AddPotentialCustomer',
                                    type: 'POST',
                                    data: formData,
                                    processData: false,
                                    contentType: false,
                                    success: function (response) {
                                        if (response.success) {
                                            Toastify({
                                                text: "Potansiyel m√º≈üteri ba≈üarƒ±yla eklendi",
                                                duration: 5000,
                                                gravity: "top",
                                                position: "right",
                                                backgroundColor: "green",
                                                close: false
                                            }).showToast(); setTimeout(function () {
                                                location.reload();
                                            }, 2000);

                                            // Formu sƒ±fƒ±rla
                                            $('#addPotentialCustomerForm')[0].reset();
                                        } else {
                                            Toastify({
                                                text: response.message,
                                                duration: 5000,
                                                gravity: "top",
                                                position: "right",
                                                backgroundColor: "red", // Hata kƒ±rmƒ±zƒ± rengi
                                                close: false
                                            }).showToast();
                                        }
                                    },
                                    error: function (err) {
                                        Toastify({
                                            text: 'Hata olu≈ütu: ' + (err.responseJSON?.message || 'Yetkiniz olduƒüundan emin olun ! '),
                                            duration: 5000,
                                            gravity: "top",
                                            position: "right",
                                            backgroundColor: "red",
                                            close: false
                                        }).showToast();
                                    }
                                });
                            }
                        });
                    } else {
                        Toastify({
                            text: response.message,
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "red", // Hata kƒ±rmƒ±zƒ± rengi
                            close: false
                        }).showToast();
                    }
                },
                error: function (err) {
                    Toastify({
                        text: '' + (err.responseJSON?.message || 'Bu i≈ülem i√ßin yetkinizin olduƒüundan emin olun !'),
                        duration: 5000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "red", // Hata kƒ±rmƒ±zƒ± rengi
                        close: false
                    }).showToast();
                }
            });
        });

        async function exportTableToExcel(tableID, filename = 'MusteriListesi.xlsx') {
            const table = document.getElementById(tableID);

            // Yeni bir workbook olu≈ütur
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet("Sheet1");

            // Controller'dan gelen Contacts bilgilerini alƒ±n
            const contactsData = JSON.parse('@Html.Raw(ViewBag.ContactsJson)');

            // Tablo ba≈ülƒ±klarƒ±nƒ± al ve "ƒ∞≈ülemler" ba≈ülƒ±ƒüƒ±nƒ± hari√ß tut
            const headerRow = table.querySelector("thead tr");
            const headers = Array.from(headerRow.querySelectorAll("th"))
                .map(cell => cell.textContent.trim())
                .filter(header => header !== "ƒ∞≈ülemler"); // "ƒ∞≈ülemler" s√ºtununu hari√ß tut

            // Ek ba≈ülƒ±klar ekle (Contacts bilgileri i√ßin)
            headers.push("Id", "G√∂revi", "ƒ∞sim Soyisim", "Telefon", "Cinsiyet", "Email");

            const excelHeaderRow = worksheet.addRow(headers);
            excelHeaderRow.eachCell(cell => {
                cell.font = { bold: true }; // Ba≈ülƒ±klarƒ± kalƒ±n yap
                cell.alignment = { horizontal: "center", vertical: "middle" }; // Ortala
            });

            // Yalnƒ±zca g√∂r√ºn√ºr satƒ±rlarƒ± alƒ±n
            const rows = Array.from(table.querySelectorAll("tbody tr")).filter(row => {
                return row.style.display !== "none"; // G√∂r√ºn√ºr satƒ±rlarƒ± filtrele
            });

            // Tablodaki g√∂r√ºn√ºr satƒ±r verilerini ekle
            rows.forEach(row => {
                const rowData = Array.from(row.querySelectorAll("td"))
                    .map(cell => cell.textContent.trim());

                // "ƒ∞≈ülemler" s√ºtununun indeksini belirle ve o s√ºtunu hari√ß tut
                const operationColumnIndex = Array.from(headerRow.querySelectorAll("th"))
                    .findIndex(cell => cell.textContent.trim() === "ƒ∞≈ülemler");

                if (operationColumnIndex !== -1) {
                    rowData.splice(operationColumnIndex, 1); // "ƒ∞≈ülemler" s√ºtununu √ßƒ±kar
                }

                // M√º≈üteri Id'sine g√∂re Contacts bilgilerini ekle
                const customerId = row.querySelector("td:first-child").textContent.trim();
                const customerContacts = contactsData[customerId] || [];

                // Contacts verilerini ayƒ±kla ve ekle
                rowData.push(
                    customerContacts.map(contact => contact.Id).join(", ") || "",
                    customerContacts.map(contact => contact.Title).join(", ") || "",
                    customerContacts.map(contact => contact.FullName).join(", ") || "",
                    customerContacts.map(contact => contact.PhoneNumber).join(", ") || "",
                    customerContacts.map(contact => contact.Gender).join(", ") || "",
                    customerContacts.map(contact => contact.Email).join(", ") || ""
                );

                // Satƒ±rlarƒ± Excel'e ekle
                const excelRow = worksheet.addRow(rowData);

                // H√ºcreleri ortala
                excelRow.eachCell(cell => {
                    cell.alignment = { horizontal: "center", vertical: "middle" }; // Ortala
                });
            });

            // Kolon geni≈üliklerini ayarla
            worksheet.columns = headers.map(() => ({ width: 20 }));

            // Excel dosyasƒ±nƒ± indir
            const buffer = await workbook.xlsx.writeBuffer();
            const blob = new Blob([buffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }


        document.getElementById('searchInput').addEventListener('keyup', function () {
            // Kullanƒ±cƒ±nƒ±n girdiƒüi arama deƒüerini al ve T√ºrk√ße karakterlere duyarlƒ± olarak k√º√ß√ºlt
            var searchValue = this.value.toLocaleLowerCase('tr-TR').trim();

            // Arama deƒüerini bo≈üluklara g√∂re b√∂l ve kelimeleri al
            var searchTerms = searchValue.split(' ').filter(function (term) {
                return term.trim() !== ''; // Bo≈ü olmayan terimleri al
            });

            // Arama i≈ülemini ba≈ülat
            filterTable(searchTerms);
        });

        function filterTable(searchTerms) {
            // Tablo satƒ±rlarƒ±nƒ± se√ß
            var tableRows = document.querySelectorAll('.user-table tbody tr');

            // Her bir satƒ±rƒ± kontrol et
            tableRows.forEach(function (row) {
                // Satƒ±rƒ±n text i√ßeriƒüini T√ºrk√ße karakterlere duyarlƒ± olarak k√º√ß√ºlt
                var rowText = row.textContent.toLocaleLowerCase('tr-TR').trim();

                // Her bir arama teriminin satƒ±r metninde olup olmadƒ±ƒüƒ±nƒ± kontrol et
                var matchesSearch = searchTerms.every(function (term) {
                    return rowText.includes(term);
                });

                // Arama kriterlerine uyan satƒ±rlarƒ± g√∂ster, uymayanlarƒ± gizle
                if (matchesSearch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            updateCustomerCount();
        }
        function updateCustomerCount() {
            const visibleRows = document.querySelectorAll(".user-table tbody tr:not([style*='display: none'])");
            const totalCustomers = visibleRows.length;
            document.getElementById("customerCount").innerText = "Listelenen Potansiyel M√º≈üterilerin Sayƒ±sƒ±: " + totalCustomers;
        }
        // Sayfa y√ºklendiƒüinde m√º≈üteri sayƒ±sƒ±nƒ± ilk olarak g√ºncelle
        document.addEventListener("DOMContentLoaded", function () {
            updateCustomerCount();
        });

        $(document).ready(function () {


            $(document).ready(function () {
                // Tablo satƒ±rlarƒ±nƒ± al
                var rows = $('.user-table tbody tr');

                // Satƒ±rlarƒ± sƒ±ralamak i√ßin bir dizi olu≈ütur
                rows.sort(function (a, b) {
                    var idA = parseInt($(a).find('td').eq(0).text()); // ƒ∞lk h√ºcredeki ID
                    var idB = parseInt($(b).find('td').eq(0).text()); // ƒ∞lk h√ºcredeki ID
                    return idB - idA; // B√ºy√ºkten k√º√ß√ºƒüe sƒ±ralama
                });

                // Sƒ±ralanmƒ±≈ü satƒ±rlarƒ± tekrar tabloya ekle
                $('.user-table tbody').empty().append(rows);
            });





        });
    </script>