@using System.Security.Claims
@using System.Globalization
@using System.Linq
@using DinkToPdf;
@using DinkToPdf.Contracts;
@functions {
private string GetStatusClass(string status)
{
switch (status)
{
case "Ziyaret":
return "badge-primary"; // Blue
case "Telefon":
return "badge-success"; // Green
case "Email":
return "badge-info"; // Light Blue
case "Numune":
return "badge-danger"; // Red
default:
return "badge-secondary"; // Gray
}
}
}


@{

var firstName = User.FindFirst("FirstName")?.Value ?? string.Empty;
var lastName = User.FindFirst("LastName")?.Value ?? string.Empty;
ViewBag.UserName = $"{firstName} {lastName}";
var isYonetici = User.IsInRole("Yönetici");

bool isYetkili = User.IsInRole("Yönetici") || User.IsInRole("Denetlemeci");

}

<link rel="stylesheet" type="text/css" href="~/css/detailscustomer.css" />
<div class="container my-5">
    <h2 class="display-4 text-center">Müşteri Detayları</h2>
    <hr>

    <div class="row g-4">
        <div class="col-md-4">
            <div class="card h-100 shadow-lg">
                <div class="card-header text-white" style="background-color: #1A1C2E;">

                    <h3 class="card-title m-0"><i class="fa fa-info-circle" aria-hidden="true"></i> Temel Bilgiler
                    </h3>
                </div>
                <div class="card-body">
                    <p><strong>Ad:</strong> @Model.Customer.Name</p>
                    <p><strong>Sektör:</strong> @Model.Customer.Sector</p>
                    <p><strong>Şehir:</strong> @Model.Customer.City</p>
                    <p><strong>İlçe:</strong> @Model.Customer.District</p>
                    <p><strong>Müşteri Sorumlusu:</strong> @Model.Customer.CreatedBy   @if (isYetkili)
                        {
                        <button class="btn btn-outline-success justify-content-end" data-toggle="modal" data-target="#editCustomerCreatedByModal">
                             <i class="fa fa-pencil-alt"></i>
                        </button>
                        }</p>
                    <p style="color: navy;"><strong>Not:</strong> @Model.Customer.Note     <button class="btn btn-outline-success" data-toggle="modal" data-target="#addNoteModal"
                        data-customer-id="@Model.Customer.Id" data-note="@Model.Customer.Note">
                        <i class="fa fa-sticky-note-o" aria-hidden="true"></i>
                    </button></p>
                

                
                    <button class="btn btn-outline-success" data-toggle="modal" data-target="#editCustomerModal">
                        Temel Bilgileri Düzenle <i class="fa fa-pencil-alt"></i>
                    </button>
                  
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                    <h3 class="card-title m-0">
                        <i class="fa fa-users"></i> İrtibat
                    </h3>
                    <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                            onclick="toggleCardBody(this)"
                            style="width: 34px; height: 34px;">
                        <i class="fa fa-chevron-up"></i>
                    </button>
                </div>
        
                <div class="card-body" style="transition: all 0.3s ease;">
                    <a class="btn btn-outline-secondary mb-3" data-toggle="modal" data-target="#addContactModal">
                        <i class="fa fa-plus-circle"></i> Yeni İrtibat
                    </a>
                    <div class="table-responsive">
                        <table class="table table-hover" id="contactsTable">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Ünvan</th>
                                    <th>İsim Soyisim</th>
                                    <th>E-Posta</th>
                                    <th>Cinsiyet</th>
                                    <th>Telefon Numarası</th>
                                    <th>Onay Durumu</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Contacts == null || !Model.Contacts.Any())
                                {
                                <tr>

                                    <div class="alert alert-danger text-center">
                                        <i class="fa-solid fa-warning"></i> Henüz hiç irtibat eklemediniz,
                                        İrtibat bilgisi eklemeden teklif oluşturamazsınız. Lütfen İrtibat ekleyiniz!
                                    </div>

                                </tr>
                                }
                                else
                                {
                                foreach (var contact in Model.Contacts)
                                {
                                <tr>
                                    <td>@contact.Id</td>
                                    <td>@contact.Title</td>
                                    <td>@contact.FullName</td>
                                    <td>@contact.Email</td>
                                    <td>@contact.Gender</td>
                                    <td>@contact.PhoneNumber</td>
                                    <td>
                                        <span class="badge change-approval @(contact.IsApproved ? " badge-success"
                                            : "badge-warning" )" data-id="@contact.Id" data-status="@contact.IsApproved"
                                            style="cursor: pointer;">
                                            @(contact.IsApproved ? "Onaylı ✅ " : "Onaysız ⚠️")
                                        </span>
                                    </td>
                                    <td>



                                        <button class="btn btn-sm btn-outline-success" data-toggle="modal"
                                            data-target="#editContactModal" data-contact-id="@contact.Id">
                                            <i class="fa fa-pencil-alt"></i>
                                        </button>

                                        @if (isYonetici)
                                        {

                                        <button class="btn btn-sm btn-outline-danger delete-contact"
                                            data-id="@contact.Id">
                                            <i class="fa fa-trash"></i>
                                        </button>

                                        }

                                    </td>
                                </tr>
                                }
                                }
                            </tbody>
                        </table>
                    </div>





                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="addNoteModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Not Ekle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addNoteForm">
                        <div class="form-group">
                            <label for="note">Not (Maksimum 100 karakter):</label>
                            <textarea id="note" class="form-control" rows="3" maxlength="100" required></textarea>
                            <small class="form-text text-muted">
                                Kalan karakter: <span id="remainingCharacters">100</span>
                            </small>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
                    <button type="button" class="btn btn-primary" id="saveNoteButton">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mt-4">
        <div class="col-md-12">
            <div class="card h-100 shadow-sm">

                <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                    <h3 class="card-title m-0">
                        <i class="fa fa-map-marker"></i> Lokasyonlar
                    </h3>
                    <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                            onclick="toggleCardBody(this)"
                            style="width: 34px; height: 34px;">
                            <i class="fa fa-chevron-down"></i> <!-- Başlangıçta aşağı ok -->
                    </button>
                </div>

               
                
        <div class="card-body" style="display: none;"> <!-- Başlangıçta gizli -->
                    <a class="btn btn-outline-secondary mb-3" data-toggle="modal" data-target="#addLocationModal">
                        <i class="fa fa-plus-circle"></i> Yeni Lokasyon
                    </a>
                    <div class="table-responsive">
                        @if (Model.Locations != null && Model.Locations.Any())
                        {
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Tanım</th>
                                    <th>Adres</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var location in Model.Locations)
                                {
                                <tr>
                                    <td>@location.Id</td>
                                    <td>@location.Description</td>
                                    <td>@location.Address</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-success" data-toggle="modal"
                                            data-target="#editLocationModal" data-location-id="@location.Id">
                                            <i class="fa fa-pencil-alt"></i>
                                        </button>
                                        @if (isYonetici)
                                        {
                                        <button class="btn btn-sm btn-outline-danger delete-location"
                                            data-id="@location.Id">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                        }
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                        }
                        else
                        {
                        <div class="alert alert-warning text-center">
                            <i class="fa-solid fa-info-circle"></i> Henüz hiçbir lokasyon bilgisi eklenmedi.

                        </div>

                        }
                    </div>

                </div>
            </div>
        </div>
    </div>



    <div class="row g-4 mt-4">
        <div class="col-md-12">
            <div class="card h-100 shadow-sm">
                <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                    <h3 class="card-title m-0">
                        <i class="fa fa-file-alt" aria-hidden="true"></i> Kayıtlar
                    </h3>
                    <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                            onclick="toggleCardBody(this)"
                            style="width: 34px; height: 34px;">
                        <i class="fa fa-chevron-down"></i>
                    </button>
                </div>
    
                <div class="card-body" style="display: none;">
                    @if (isYonetici)
                    {
                    <a class="btn btn-secondary mb-3" data-toggle="modal" data-target="#missionModal">
                        <i class="fa fa-book" aria-hidden="true"></i> Görev Oluştur
                    </a>
                    }
                    <a class="btn btn-outline-primary mb-3" data-toggle="modal" data-target="#visitRecordModal">
                        <i class="fa fa-car" aria-hidden="true"></i> Ziyaret Kaydı Oluştur
                    </a>
                    <a class="btn btn-outline-success mb-3" data-toggle="modal" data-target="#phoneCallRecordModal">
                        <i class="fa fa-volume-control-phone" aria-hidden="true"></i> Telefon Arama Kaydı Oluştur
                    </a>
                    <a class="btn btn-outline-info mb-3" data-toggle="modal" data-target="#emailRecordModal">
                        <i class="fa fa-envelope" aria-hidden="true"></i> E-Posta Kaydı Oluştur
                    </a>
                    <a class="btn btn-outline-danger mb-3" data-toggle="modal" data-target="#sampleRecordModal">
                        <i class="fa fa-microscope"></i> Numune Çalışma Kaydı Oluştur
                    </a>
                    <div class="table-responsive">
                        <table class="table table-responsive-lg">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Olay</th>
                                    <th>Planlama Tarihi</th>
                                    <th>Gerçekleşme Tarihi</th>
                                    <th>Açıklama</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @model CustomerDetailViewModel

                            <tbody>
                                @if (Model.Records != null && Model.Records.Any())
                                {
                                // Id'ye göre azalan sırada sıralama yapılıyor
                                foreach (var record in Model.Records.OrderByDescending(r => r.Id))
                                {
                                if (record != null)
                                {
                                <tr>
                                    <td>@record.Id</td>
                                    <td>
                                        <span class="badge @GetStatusClass(record.Status)">
                                            @record.Status
                                        </span>
                                    </td>
                                    <td>
                                        @if (record.PlannedDate.HasValue)
                                        {
                                        @record.PlannedDate.Value.ToString("dd/MM/yyyy")
                                        }
                                        else
                                        {
                                        <span>Planlanmadı</span>
                                        }
                                    </td>
                                    <td>
                                        @if (record.ActualDate.HasValue)
                                        {
                                        <button class="btn btn-sm btn-warning set-today-btn" data-record-id="@record.Id"
                                            data-is-today-set="true">
                                            @record.ActualDate.Value.ToString("dd/MM/yyyy")
                                            <i class="fa fa-check-square" aria-hidden="true"></i>
                                        </button>
                                        }
                                        else
                                        {
                                        <button class="btn btn-sm btn-outline-dark set-today-btn"
                                            data-record-id="@record.Id" data-is-today-set="false">
                                            Bugün Gerçekleşti Olarak Ayarla
                                            <i class="fa fa-check" aria-hidden="true"></i>
                                        </button>
                                        }
                                    </td>

                                    <td>@record.Information</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-success edit-record-button"
                                            data-record-id="@record.Id" data-record-status="@record.Status">
                                            <i class="fa fa-pencil-alt"></i>
                                        </button>
                                        @if (isYonetici)
                                        {
                                        <button class="btn btn-sm btn-outline-danger delete-record"
                                            data-id="@record.Id">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                        }
                                    </td>
                                </tr>
                                }
                                }
                                }
                                else
                                {
                                <tr>
                                    <div class="alert alert-warning text-center">
                                        <i class="fa-solid fa-info-circle"></i> Henüz hiç kayıt eklemediniz.

                                    </div>
                                </tr>
                                }
                            </tbody>
                            </tbody>
                        </table>


                    </div>

                </div>
            </div>
        </div>
    </div>

    <div class="row g-4 mt-4">
        <div class="col-md-12">
            <div class="card h-100 shadow-sm">
                <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                    <h3 class="card-title m-0">
                        <i class="fa fa-file-invoice-dollar" aria-hidden="true"></i> Teklifler
                    </h3>
                    <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                            onclick="toggleCardBody(this)"
                            style="width: 34px; height: 34px;">
                        <i class="fa fa-chevron-up"></i>
                    </button>
                </div>
    
                <div class="card-body" style="transition: all 0.3s ease;">
                    <div style="text-align: left;">
                        <button class="btn btn-outline-dark btn-lg mb-3" data-toggle="modal"
                            data-target="#addOfferModal" style="display: inline-block;">
                            <i class="fa fa-plus-circle"></i> Teklif Oluştur
                        </button>

                        <button class="btn btn-warning btn-lg mb-3" onclick="generatePdfForSelectedOffers()"
                            style="display: inline-block;">
                            <i class="fas fa-file-pdf"></i> Seçili Teklifleri PDF İndir
                        </button>
                    </div>


                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <!-- Tüm <th> öğelerine ortak stil eklemek için inline CSS veya bir sınıf (class) ekleyebilirsiniz. -->
                                    <th style="text-align: center; vertical-align: middle;">
                                        <div class="form-check"
                                            style="display: flex; justify-content: center; align-items: center;">
                                            <input class="form-check-input" type="checkbox" id="selectAllOffers" />
                                            <label class="form-check-label" style="color: #1A1C2E;"
                                                for="selectAllOffers"></label>
                                        </div>

                                    </th>

                                    <!-- Proje İptal Başlıklar -->
                                    <th style="text-align: center; vertical-align: middle;">Id</th>
                                    <th style="text-align: center; vertical-align: middle;">Teklif Adı</th>
                                    <th style="text-align: center; vertical-align: middle;">Miktar</th>
                                    <th style="text-align: center; vertical-align: middle;">Ödeme Methodu</th>
                                    <th style="text-align: center; vertical-align: middle;">Fiyat</th>
                                    <th style="text-align: center; vertical-align: middle;">Görsel</th>
                                    <th style="text-align: center; vertical-align: middle;">Durum</th>
                                    <th style="text-align: center; vertical-align: middle;">Olay</th>
                                </tr>
                            </thead>

                            <tbody>
                                @if (Model.Offers != null && Model.Offers.Any())
                                {
                                foreach (var offer in Model.Offers)
                                {
                                <tr data-offer-id="@offer.Id">
                                    <!-- Checkbox hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        <div class="custom-control custom-checkbox">
                                            <input type="checkbox" class="custom-control-input offer-checkbox"
                                                value="@offer.Id" id="offerCheckbox@offer.Id" disabled>
                                            <label class="custom-control-label" for="offerCheckbox@offer.Id"></label>
                                        </div>
                                    </td>

                                    <!-- Id hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">@offer.Id</td>

                                    <!-- EnXBoy hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        @offer.ProductName
                                    </td>


                                    <!-- Miktar Bilgisi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        @{
                                        var formattedOrderQuantity = offer.OrderQuantity.ToString("N0").Replace(",",
                                        ".");
                                        }
                                        @formattedOrderQuantity @offer.OrderMethodName
                                    </td>

                                    <!-- Ödeme Metodu -->
                                    <td style="text-align: center; vertical-align: middle;">@offer.PaymentMethod</td>

                                    <!-- Fiyat Bilgisi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        @if (offer.Price.HasValue)
                                        {
                                        @offer.Price?.ToString("#,0.#####", new CultureInfo("tr-TR"))
                                        @if (@offer.Currency == "TRY")
                                        {
                                        <span> TRY </span>
                                        }
                                        else if (@offer.Currency == "EUR")
                                        {
                                        <span> EUR </span> <!-- Euro Simgesi (€) -->
                                        }
                                        else if (@offer.Currency == "USD")
                                        {
                                        <span> USD </span> <!-- Dolar Simgesi ($) -->
                                        }
                                        }
                                        else
                                        {
                                        <span>Belirtilmedi</span>
                                        }
                                    </td>


                                    <td style="text-align: center; vertical-align: middle;">
                                        @if (!string.IsNullOrEmpty(offer.OfferPicture))
                                        {
                                        <!-- "Resmi Gör" butonu -->
                                        <button id="btn-@offer.Id" class="btn btn-primary"
                                            onclick="toggleImage('@offer.OfferPicture', 'offerImage-@offer.Id', 'btn-@offer.Id')">Resmi
                                            Gör</button>
                                        <!-- Resim başlangıçta gizli ve src boş -->
                                        <img id="offerImage-@offer.Id" src="" alt="Offer Image"
                                            style="max-width: 120px; max-height: 120px; border: 2px solid #000; display: none;" />
                                        }
                                        else
                                        {
                                        <span>Resim mevcut değil</span>
                                        }
                                    </td>

                                    <!-- Teklif Durum Butonu -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        <button class="@(offer.OfferStatus switch {
                                            OfferStatus.NotDelivered => " btn btn-primary btn-lg",
                                            OfferStatus.Delivered=> "btn btn-warning btn-lg",
                                            OfferStatus.Won => "btn btn-success btn-lg",
                                            OfferStatus.HighPrice or
                                            OfferStatus.DeadlineIssue or
                                            OfferStatus.LowQuality or
                                            OfferStatus.Cancel or
                                            OfferStatus.Continuewithexisting => "btn btn-danger btn-lg",
                                            _ => "btn btn-secondary btn-lg"
                                            })"
                                            data-offer-id="@offer.Id"
                                            data-offer-status="@offer.OfferStatus"
                                            data-has-price="@offer.Price != null"
                                            onclick="toggleOfferStatus(this)">
                                            @offer.OfferStatus.GetDisplayName()
                                        </button>
                                    </td>





                                    <!-- İşlem Butonları (Detay, PDF İndir, Düzenle ve Sil) -->
                                    <td style="display: flex; justify-content: center; align-items: center; gap: 10px;">
                                        <!-- Detay Butonu -->
                                        <button class="btn btn-dark"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            onclick="event.stopPropagation(); window.location.href='/customer/offerdetails/@offer.Id';">
                                            <i class='fas fa-sign-in-alt' style="font-size: 24px; margin: 0;"></i>
                                        </button>

                                        <!-- PDF İndir Butonu -->
                                        <button class="btn btn-warning download-pdf-button"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-offer-id="@offer.Id" onclick="downloadPdfForOffer('@offer.Id')">
                                            <i class="fas fa-file-pdf" style="font-size: 24px; margin: 0;"></i>
                                        </button>

                                        <!-- Düzenle Butonu -->
                                        <button class="btn btn-success"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-toggle="modal" data-target="#editOfferModal" data-offer-id="@offer.Id">
                                            <i class="fa fa-pencil-alt" style="font-size: 24px; margin: 0;"></i>
                                        </button>

                                        <!-- Kopya Teklif Butonu -->
                                        <!-- Kopya Teklif Butonu -->
                                        <button class="btn btn-info copy-offer-btn"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-toggle="modal" data-target="#editOfferModal" data-offer-id="@offer.Id"
                                            data-action="copy" data-copy="true">
                                            <i class="fa-solid fa-copy" style="font-size: 24px; margin: 0;"></i>
                                        </button>
                                        @{
                                            bool isWon = offer.OfferStatus == OfferStatus.Won;
                                        }
                                        @{
                                            var usedOfferIds = ViewBag.UsedOfferIds as List<int>;
                                            bool isUsed = usedOfferIds != null && usedOfferIds.Contains(offer.Id);
                                            var btnClass = isUsed ? "btn-orange" : "btn-orange";
                                            var btnTitle = isUsed ? "Zaten Reçeteleştirildi" : "Tekliften Reçete Oluştur";
                                        }
                                        <button class="btn @btnClass copy-offerrecipe-btn "
                                                style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; flex-direction: column; line-height: 1;"
                                                data-toggle="modal"
                                                data-offer-id="@offer.Id"
                                                data-used="@isUsed.ToString().ToLower()"
                                                title="@btnTitle"
                                                @(isWon ? "" : "disabled")>
                                            <div class="r-button-content">
                                                <span style="font-weight: bold; font-size: 30px;">R</span>
                                                @if (isUsed)
                                                {
                                                    <i class="fa-solid fa-check mt-1"></i>
                                                }
                                            </div>
                                        </button>
                                        
                                        





                                        <!-- Sil Butonu (Sadece Yöneticiler için) -->
                                        @if (isYonetici)
                                        {
                                        <button class="btn btn-danger delete-offer"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-id="@offer.Id" onclick="deleteOffer('@offer.Id')">
                                            <i class="fa fa-trash" style="font-size: 24px; margin: 0;"></i>
                                        </button>
                                        }
                                    </td>

                                </tr>
                                }
                                }
                                else
                                {
                                <div class="alert alert-warning text-center">
                                    <i class="fa-solid fa-info-circle"></i> Henüz hiç teklif eklemediniz.
                                </div>
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="row g-4 mt-4">
        <div class="col-md-12">
            <div class="card h-100 shadow-sm">
                <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                    <h3 class="card-title m-0">
                        <i class="fa fa-receipt" aria-hidden="true"></i> Reçeteler
                    </h3>
                    <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                            onclick="toggleCardBody(this)"
                            style="width: 34px; height: 34px;">
                        <i class="fa fa-chevron-up"></i>
                    </button>
                </div>
    
                <div class="card-body" style="transition: all 0.3s ease;">
                    <div style="text-align: left;">
                        <button class="btn btn-outline-dark new-recipe-btn btn-lg mb-3" data-toggle="modal"
                            data-target="#addRecipeModal" style="display: inline-block;">
                            <i class="fa fa-plus-circle"></i> Reçete Oluştur
                        </button>


                    </div>


                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>


                                    <!-- Proje İptal Başlıklar -->
                                    <th style="text-align: center; vertical-align: middle;">Id</th>
                                    <th style="text-align: center; vertical-align: middle;">Güncel Durum</th>
                                    <th style="text-align: center; vertical-align: middle;">Kayıt Tarihi</th>
                                    <th style="text-align: center; vertical-align: middle;">Kayıt Yapan</th>
                                    <th style="text-align: center; vertical-align: middle;">Reçete Kodu</th>
                                    <th style="text-align: center; vertical-align: middle;">Reçete</th>
                                    <th style="text-align: center; vertical-align: middle;">Olay</th>
                                </tr>
                            </thead>

                            <tbody>
                                @if (Model.Recipes != null && Model.Recipes.Any())
                                {
                                foreach (var recipe in Model.Recipes)
                                {
                                <tr data-offer-id="@recipe.Id">

                                    <!-- Id hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">@recipe.Id</td>
                                    <!-- Id hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        @(recipe.CurrentStatus == 1 ? "Reçete kaydı yapıldı" : "Diğer")
                                    </td>




                                    <td style="text-align: center; vertical-align: middle;">
                                        @recipe.CreatedAt?.ToString("dd MMM yyyy | hh:mm", new
                                        System.Globalization.CultureInfo("tr-TR"))

                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @recipe.Customer?.Name
                                    </td>

                                    <!-- EnXBoy hücresi -->
                                    <td style="text-align: center; vertical-align: middle;">
                                        @recipe.RecipeCode
                                    </td>
                                    <td style="text-align: center; vertical-align: middle;">
                                        @recipe.RecipeName
                                    </td>

                                    <!-- İşlem Butonları (Detay, PDF İndir, Düzenle ve Sil) -->
                                    <td style="display: flex; justify-content: center; align-items: center; gap: 10px;">


                                        <a class="btn btn-dark" href="@Url.Action("recipeDetail", "erp", new { id = recipe.Id })"
                                        style="display: inline-flex; justify-content: center; align-items: center; width: 60px; height: 60px;">
                                         <i class='fas fa-sign-in-alt' style="font-size: 24px; margin: 0;"></i>
                                     </a>
                                        <!-- Düzenle Butonu -->
                                        <button class="btn btn-success"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            onclick="getRecipe(@recipe.Id)">
                                            <i class="fa fa-pencil-alt" style="font-size: 24px; margin: 0;"></i>
                                        </button>

               
                     
                                        <!-- Kopya Teklif Butonu -->
                                        <!-- Kopya Teklif Butonu -->
                                        <!-- <button class="btn btn-info copy-recipe-btn"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-toggle="modal" data-target="#editRecipeModal"
                                            data-offer-id="@recipe.Id" data-action="copy" data-copy="true">
                                            <i class="fa-solid fa-copy" style="font-size: 24px; margin: 0;"></i>
                                        </button> -->



                                        <!-- Sil Butonu (Sadece Yöneticiler için) -->
                                        @if (isYonetici)
                                        {
                                        <button class="btn btn-danger delete-recipe"
                                            style="width: 60px; height: 60px; padding: 0; display: flex; justify-content: center; align-items: center; line-height: 1;"
                                            data-id="@recipe.Id" onclick="deleteRecipe('@recipe.Id')">
                                            <i class="fa fa-trash" style="font-size: 24px; margin: 0;"></i>
                                        </button>
                                        }
                                    </td>

                                </tr>
                                }
                                }
                                else
                                {
                                <div class="alert alert-warning text-center">
                                    <i class="fa-solid fa-info-circle"></i> Henüz hiç reçete eklemediniz.
                                </div>
                                }
                            </tbody>

                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade custom-wide-modal2" id="editRecipeModal" tabindex="-1" aria-labelledby="editRecipeModalLabel"
        aria-hidden="true" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editRecipeModalLabel">Reçete Düzenle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-y: auto; max-height: calc(95vh - 120px); padding: 20px;">
                    <form id="editRecipeForm" enctype="multipart/form-data">
                        <input type="hidden" id="editRecipeId" name="Id" />
                        <input type="hidden" id="editRecipeCustomerId" name="CustomerId" />

                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="editRecipeCustomerName">Müşteri Adı</label>
                                <input type="text" class="form-control" id="editRecipeCustomerName" name="CustomerName"
                                    readonly />
                            </div>
                            <div class="form-group col-md-6">
                                <label for="editRecipeName">Reçete Adı</label>
                                <input type="text" class="form-control" id="editRecipeName" name="RecipeName"   style="color:#017BFD">
                            </div>
                            <div class="form-group col-md-1">
                                <label for="editRecipeWidth">En (mm)</label>
                                <input type="number" class="form-control" id="editRecipeWidth" name="Width" required
                                    min="0">
                            </div>
                            <div class="form-group col-md-1">
                                <label for="editRecipeHeight">Boy (mm)</label>
                                <input type="number" class="form-control" id="editRecipeHeight" name="Height" required
                                    min="0">
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeQuantity">Sipariş Miktarı</label>
                                <input type="text" class="form-control" id="editRecipeQuantity" name="Quantity"
                                    required>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeUnitId">Sipariş Birimi</label>
                                <select name="UnitId" class="form-control" id="editRecipeUnitId"></select>
                            </div>
                            <div class="form-group col-md-3">
                                <label for="editRecipePaperInfo">Kağıt Bilgisi</label>
                                <select name="PaperTypeId" class="form-control" id="editRecipePaperInfo"></select>
                            </div>
                            <div class="form-group col-md-3">
                                <label for="editRecipeAdhesiveInfo">Tutkal Bilgisi</label>
                                <select name="PaperAdhesionTypeId" class="form-control"
                                    id="editRecipeAdhesiveInfo"></select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipePaperDetail">Detay</label>
                                <select name="PaperDetailId" class="form-control" id="editRecipePaperDetail"></select>
                            </div>


                            <div class="form-group col-md-2">
                                <label for="editRecipeCustomerCode">Müşteri Ürün Kodu</label>
                                <input type="text" class="form-control" id="editRecipeCustomerCode" name="CustomerCode"
                                     />
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeIsPrinted">Baskılı / Baskısız</label>
                                <select class="form-control" id="editRecipeIsPrinted" name="IsPrinted">
                                    <option value="true" selected>Baskılı</option>
                                    <option value="false">Baskısız</option>
                                </select>
                            </div>
                            <div class="form-group col-md-2" id="editRecipeColorOptions" style="display: none;">
                                <label for="editRecipeNumberOfColors">Renk Sayısı</label>
                                <select class="form-control" id="editRecipeNumberOfColors" name="NumberOfColors">
                                    <option value="1">1 Renk</option>
                                    <option value="2">2 Renk</option>
                                    <option value="3">3 Renk</option>
                                    <option value="4" selected>4 Renk</option>
                                    <option value="5">5 Renk</option>
                                    <option value="6">6 Renk</option>
                                    <option value="7">7 Renk</option>
                                    <option value="8">8 Renk</option>
                                </select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipePrintType">İlave İşlem</label>
                                <select name="AdditionalProcessing" class="form-control" id="editRecipePrintType"
                                    multiple="multiple"></select>
                            </div>

                            <div class="form-group col-md-2">
                                <label for="editRecipeCustomerAdhesion">Müşteri Yapıştırması</label>
                                <select name="CustomerAdhesionTypeId" class="form-control"
                                    id="editRecipeCustomerAdhesion"></select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipePackage">Paketleme</label>
                                <select name="PackageTypeId" class="form-control" id="editRecipePackage"></select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeLabelPerWrap">Bir sarımdaki etiket adeti</label>
                                <input type="text" name="LabelPerWrap" class="form-control" id="editRecipeLabelPerWrap">
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeOuterDiameter">Sarım dış çapı (cm)</label>
                                <input type="number" name="OuterDiameter" class="form-control"
                                    id="editRecipeOuterDiameter">
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeCoreLength">Kuka Uzunluğu</label>
                                <select name="CoreLengthId" class="form-control" id="editRecipeCoreLength"></select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeCoreDiameter">Kuka Çapı</label>
                                <select name="CoreDiameterId" class="form-control" id="editRecipeCoreDiameter"></select>
                            </div>
                            <div class="form-group col-md-2">
                                <label for="editRecipeShipmentMethod">Teslim Şekli</label>
                                <select name="ShipmentMethodId" class="form-control"
                                    id="editRecipeShipmentMethod"></select>
                            </div>

                            <!-- Akış Yönü -->
                            <div class="form-group col-md-8">
                                <label><strong>Akış Yönü</strong></label>
                                <div class="row mt-2">
                                    @for (int i = 1; i <= 8; i++) { <div class="col-md-3 mb-3">
                                        <label class="winding-option">
                                            <input type="radio" name="WindingDirectionType" value="@i" required />
                                            <span class="custom-radio-indicator"></span>
                                            <span class="tick-mark">&#10004;</span>
                                            <img src="/img/winding/@(i).jpg" alt="Akış Yönü @(i)" />
                                        </label>
                                </div>
                                }
                            </div>
                        </div>

                        <!-- Notlar -->
                        <div class="form-group col-md-4">
                            <div class="form-group">
                                <label for="editRecipeNoteToDesigner">Grafikere Not 📝</label>
                                <textarea class="form-control form-control-sm" id="editRecipeNoteToDesigner"
                                    name="NoteToDesigner" rows="2"></textarea>
                            </div>

                            <div class="form-group">
                                <label for="editRecipeNoteForProduction">Üretim için Not 🗓️</label>
                                <textarea class="form-control form-control-sm" id="editRecipeNoteForProduction"
                                    name="NoteForProduction" rows="2"></textarea>
                            </div>
                            <div class="form-group col-md-12 text-center mt-5">
                                <button type="submit" class="btn btn-success mb-3 btn-lg btn-block">
                                    REÇETEYİ GÜNCELLE <i class="fa fa-save"></i>
                                </button>
                            </div>
                        </div>


                </div>

           

                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade custom-wide-modal2" id="addRecipeModal" tabindex="-1" aria-labelledby="addRecipeModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRecipeModalLabel">Yeni Reçete Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="overflow-y: auto; max-height: calc(95vh - 120px); padding: 20px;">
                <form id="addRecipeForm" enctype="multipart/form-data">
                    <input type="hidden" id="recipeCustomerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="recipeCustomerName">Müşteri Adı</label>
                            <input type="text" class="form-control" id="recipeCustomerName" name="CustomerName"
                                value="@Model.Customer.Name" readonly style="color:navy" />
                        </div>
                        <div class="form-group col-md-6">
                            <label for="RecipeName">Reçete Adı</label>
                            <input type="text" class="form-control" id="RecipeName" name="RecipeName"
                                style="color:green">
                        </div>
                        <div class="form-group col-md-1">
                            <label for="recipeWidth">En(mm)</label>
                            <input type="number" class="form-control" id="recipeWidth" name="Width" placeholder="mm"
                                required min="0">
                        </div>
                        <div class="form-group col-md-1">
                            <label for="recipeHeight">Boy(mm)</label>
                            <input type=" number" class="form-control" id="recipeHeight" name="Height" placeholder="mm"
                                required min="0">
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipeQuantity">Sipariş Miktarı</label>
                            <input type="text" class="form-control" id="recipeQuantity" name="Quantity"
                                placeholder="Miktar giriniz..." required>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipeOrderMethod">Sipariş Birimi</label>
                            <select name="UnitId" class="form-control" id="recipeOrderMethod"> </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="recipePaperInfo">Kağıt Bilgisi</label>
                            <select name="PaperTypeId" class="form-control" id="recipePaperInfo"> </select>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="recipeAdhesiveInfo">Tutkal Bilgisi</label>
                            <select name="PaperAdhesionTypeId" class="form-control" id="recipeAdhesiveInfo"> </select>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipePaperDetail">Detay</label>
                            <select name="PaperDetailId" class="form-control" id="recipePaperDetail"> </select>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeCustomerCode">Müşteri Ürün Kodu</label>
                            <input type="text" class="form-control" id="recipeCustomerCode" name="CustomerCode"/>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeIsPrinted">Baskılı / Baskısız</label>
                            <select class="form-control" id="recipeIsPrinted" name="IsPrinted">
                                <option value="true" selected>Baskılı</option>
                                <option value="false">Baskısız</option>
                            </select>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipePrintType">İlave İşlem</label>
                            <select name="AdditionalProcessing" class="form-control" id="recipePrintType"
                                multiple="multiple"></select>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipeCustomerAdhesion">Müşteri Yapıştırması</label>
                            <select name="CustomerAdhesionTypeId" class="form-control" id="recipeCustomerAdhesion">
                            </select>
                        </div>
                        <div class="form-group col-md-2">
                            <label for="recipePackage">Paketleme</label>
                            <select name="PackageTypeId" class="form-control" id="recipePackage">
                            </select>
                        </div>

                    
                        <div class="form-group col-md-2">
                            <label for="recipeLabelPerWrap">Bir sarımdaki etiket adeti</label>
                            <input type="text" name="LabelPerWrap" class="form-control" id="recipeLabelPerWrap"
                                placeholder="Etiket adedi giriniz...">
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeOuterDiameter">Sarım dış çapı (cm)</label>
                            <input type="number" name="OuterDiameter" class="form-control" id="recipeOuterDiameter"
                                placeholder="Dış çap giriniz...">
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeCoreLength">Kuka Uzunluğu</label>
                            <select name="CoreLengthId" class="form-control" id="recipeCoreLength">
                            </select>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeCoreDiameter">Kuka Çapı</label>
                            <select name="CoreDiameterId" class="form-control" id="recipeCoreDiameter">
                            </select>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="recipeShipmentMethod">Teslim Şekli</label>
                            <select name="ShipmentMethodId" class="form-control" id="recipeShipmentMethod">
                            </select>
                        </div>
      
                            <!-- SOL TARAF: Akış Yönü (8 kolon) -->
                            <div class="form-group col-md-8">
                                <div class="row mt-2">
                                    @for (int i = 1; i <= 8; i++) { <div class="col-md-3 mb-3">
                                        <label class="winding-option">
                                            <input type="radio" name="WindingDirectionType" value="@i" required />
                                            <span class="custom-radio-indicator"></span>
                                            <span class="tick-mark">&#10004;</span> <!-- Yeşil TİK -->
                                            <img src="/img/winding/@(i).jpg" alt="Akış Yönü @(i)" />
                                        </label>
                                </div>
                                }
                            </div>
                        </div>

                        <!-- SAĞ TARAF: Notlar ve diğer küçük alanlar (4 kolon) -->
                        <div class="form-group col-md-4">
                            <div class="form-group">
                                <label for="recipteNoteToDesigner">Grafikere Not 📝 </label>
                                <textarea class="form-control form-control-sm" id="recipteNoteToDesigner"
                                    name="NoteToDesigner" rows="2"></textarea>
                            </div>

                            <div class="form-group">
                                <label for="recipeNoteForProduction">Üretim için Not 🗓️</label>
                                <textarea class="form-control form-control-sm" id="recipeNoteForProduction"
                                    name="NoteForProduction" rows="2"></textarea>
                            </div>

                            <div class="form-group col-md-12 text-center mt-5">
                                <button type="submit" class="btn btn-success mb-3 btn-lg btn-block">
                                    REÇETEYİ EKLE <i class="fa fa-check" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                     
    
                  

              
            </div>
            </form>
        </div>
    </div>
</div>
</div>

<!-- Modal -->

<div class="row g-4 mt-4">
    <div class="col-md-12">
        <div class="card h-100 shadow-sm">
            <div class="card-header text-white d-flex justify-content-between align-items-center" style="background-color: #1A1C2E;">
                <h3 class="card-title m-0">
                    <i class="fa-solid fa-database"></i> LOG Kayıtları
                </h3>
                <button class="btn btn-light btn-sm rounded-circle d-flex align-items-center justify-content-center"
                        onclick="toggleCardBody(this)"
                        style="width: 34px; height: 34px;">
                        <i class="fa fa-chevron-down"></i> <!-- Başlangıçta aşağı ok -->
                </button>
            </div>

            <div class="card-body" style="display: none;"> <!-- Başlangıçta gizli -->
                <!-- Kart içeriği buraya -->
                @if (Model.ChangeLogs != null && Model.ChangeLogs.Any())
                {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Tarih</th>
                                <th>Alan</th>
                                <th>Eski Değer</th>
                                <th>Yeni Değer</th>
                                <th>İşlem Türü</th>
                                <th>Değiştiren</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model.ChangeLogs)
                            {
                            var buttonClass = log.OperationType switch
                            {
                            "Oluşturuldu" => "btn-success", // Yeşil
                            "Güncellendi" => "btn-warning", // Sarı
                            "Silindi" => "btn-danger",
                            "Transfer Edildi" => "btn-info", // Kırmızı
                            _ => "btn-secondary" // Varsayılan nötr renk
                            };

                            <tr>
                                <td>@log.ChangedAt.ToString("dd MMM yyyy HH.mm", new
                                    System.Globalization.CultureInfo("tr-TR"))</td>

                                <td>@LogHelper.GetTranslatedColumnName(log.ColumnName)</td>
                                <td>@log.OldValue</td>
                                <td>@log.NewValue</td>
                                <td>
                                    <button class="btn @buttonClass btn-sm">
                                        @log.OperationType
                                    </button>
                                </td>
                                <td>@log.ChangedBy</td>

                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
                }
                else
                {
                <div class="alert alert-warning text-center">
                    <i class="fa-solid fa-info-circle"></i> Değişiklik log kaydı bulunamadı.
                </div>
                }
            </div>
        </div>
    </div>
</div>



<div class="mt-4">
    <a class="btn btn-dark" href="@Url.Action("ListCustomer","Customer")">
        <i class="fa fa-arrow-left"></i> Müşteri Listesine Geri Dön
    </a>
</div>
</div>



<div class="modal fade custom-wide-modal2" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editOfferModalLabel">Teklifi Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="overflow-y: auto; max-height: calc(95vh - 120px); padding: 20px;">
                <form id="editOfferForm" enctype="multipart/form-data">
                    <input type="hidden" id="editOfferId" name="Id" />
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <!-- Proje İptal form alanları -->
                    <div class="form-row">

                        <div class="form-group col-md-3">
                            <label for="editWidth">En(mm)</label>
                            <input type="number" class="form-control" id="editWidth" name="Width" placeholder="mm"
                                required min="0">
                        </div>
                        <div class="form-group col-md-3">
                            <label for="editHeight">Boy/Akış</label>
                            <input type="number" class="form-control" id="editHeight" name="Height" placeholder="mm"
                                required min="0">
                        </div>

                        
                        <div class="form-group col-md-6">
                            <label for="editPaperInfo">Kağıt Bilgisi</label>
                            <select type="tags-outside" class="form-control" id="editPaperInfo" name="PaperInfo">
                            </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="editAdhesiveInfo">Tutkal Bilgisi</label>
                            <select type="tags-outside" class="form-control" id="editAdhesiveInfo" name="AdhesiveInfo">
                            </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="editisPrinted">Baskılı / Baskısız</label>
                            <select class="form-control" id="editisPrinted" name="IsPrinted"
                                onchange="edittoggleColorOptions()">
                                <option value="true" selected>Baskılı</option>
                                <option value="false">Baskısız</option>
                            </select>
                        </div>
                        <div class="form-group col-md-6" id="editcolorOptions" style="display: block;">
                            <label for="editnumberOfColors">Renk Sayısı</label>
                            <select class="form-control" id="editnumberOfColors" name="NumberOfColors">
                                <option value="1">1 Renk</option>
                                <option value="2">2 Renk</option>
                                <option value="3">3 Renk</option>
                                <option value="4" selected>4 Renk</option>
                                <!-- Varsayılan olarak 4 Renk seçili -->
                                <option value="5">5 Renk</option>
                                <option value="6">6 Renk</option>
                                <option value="7">7 Renk</option>
                                <option value="8">8 Renk</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editproductName">Teklif Adı</label>
                            <input type="text" class="form-control" id="editproductName" name="ProductName">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="editAdditionalProcessing">İlave İşlem</label>
                            <select name="editAdditionalProcessing" class="form-control" id="editAdditionalProcessing"
                                placeholder="İlave İşlem Seçiniz" multiple="multiple"></select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editOrderQuantity">Sipariş Miktarı</label>
                            <input type="text" class="form-control" id="editOrderQuantity" name="OrderQuantity"
                                required>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="editOrderMethod">Sipariş Birimi </label>
                            <select type="tags-outside" class="form-control" id="editOrderMethod"
                                name="OrderMethod"></select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editDeliveryMethod">Teslim Şekli</label>
                            <select name='tags-outside' class="form-control" id="editDeliveryMethod"
                                placeholder="Bir seçenek seçiniz..." value=""> </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="editPaymentMethod">Ödeme Yöntemi</label>
                            <select class="form-control" id="editPaymentMethod" name="PaymentMethod">
                                <option value="Çek">Çek</option>
                                <option value="Havale">Havale</option>
                            </select>
                        </div>



                        <div class="form-group col-md-6">
                            <label for="editPaymentTerm">Ödeme Vadesi</label>
                            <select class="form-control" id="editPaymentTerm" name="PaymentTerm">
                                <option value="">Seçiniz...</option>
                                <option value="15">15 Gün</option>
                                <option value="30">30 Gün</option>
                                <option value="45">45 Gün</option>
                                <option value="60">60 Gün</option>
                                <option value="75">75 Gün</option>
                                <option value="90">90 Gün</option>
                                <option value="105">105 Gün</option>
                                <option value="120">120 Gün</option>
                                <option value="135">135 Gün</option>
                                <option value="150">150 Gün</option>
                                <option value="165">165 Gün</option>
                                <option value="180">180 Gün</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editDescription">Açıklama</label>
                            <input type="text" class="form-control" id="editDescription" name="Description">
                        </div>

                        <div class="form-group col-md-6">
                            <label for="editOfferPicture">Ürün Resmi</label>
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="editOfferPicture"
                                    name="editOfferPicture" type="file">
                                <label class="custom-file-label" for="editOfferPicture">Dosya seçin...</label>
                            </div>
                            <!-- Mobile Camera Button -->
                            <button type="button" id="cameraButton" class="btn btn-outline-dark d-none d-md-none"><i
                                    class="fa-solid fa-camera"></i> Kamerayı Aç</button>

                            <!-- Hidden File Input for Camera -->
                            <input type="file" class="d-none" id="mobileCameraInput" name="mobileCameraInput"
                                accept=".jpg, .jpeg, .png, .gif">

                            <!-- Image Preview -->
                            <img id="editOfferPicturePreview" src="#" alt="Preview" class="img-preview" />
                        </div>

                        <div class="form-group col-md-12">
                            <button type="submit" class="btn btn-outline-dark mb-3 btn-lg"><i class="fa fa-save"
                                    aria-hidden="true"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="addContactModal" tabindex="-1" aria-labelledby="addContactModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addContactModalLabel">Yeni İrtibat Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addContactForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="contactTitle">Görevi</label>
                        <input type="text" class="form-control" id="contactTitle" name="Title" required>
                    </div>
                    <div class="form-group">
                        <label for="contactFullName">İsim Soyisim</label>
                        <input type="text" class="form-control" id="contactFullName" name="FullName" required>
                    </div>
                    <div class="form-group">
                        <label for="contactGender">Cinsiyet</label>
                        <select class="form-control" id="contactGender" name="Gender" required>
                            <option value="">Seçiniz</option>
                            <option value="Erkek">Erkek</option>
                            <option value="Kadın">Kadın</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="contactPhoneNumber">Telefon Numarası:</label>
                        <input type="tel" class="form-control" id="contactPhoneNumber" name="PhoneNumber" required
                            oninput="formatPhoneNumber(this)" placeholder="0 545 555 55 55" maxlength="15" />

                    </div>

                    <div class="form-group">
                        <label for="contactEmail">E-Posta</label>
                        <input type="email" class="form-control" id="contactEmail" name="Email"
                            pattern="^[a-zA-Z0-9._%+-]+\u0040[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                            title="Lütfen geçerli bir email adresi giriniz.">
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Delete Offer Confirmation Modal -->
<div class="modal fade" id="deleteOfferModal" tabindex="-1" role="dialog" aria-labelledby="deleteOfferModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteOfferModalLabel">Delete Offer</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this offer?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Visit Record Modal -->
<div class="modal fade" id="editVisitRecordModal" tabindex="-1" aria-labelledby="editVisitRecordModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editVisitRecordModalLabel">Ziyaret Kaydı Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editVisitRecordForm">
                    <input type="hidden" id="editVisitRecordId" name="Id" />

                    <div class="form-group">
                        <label for="editVisitPlannedDate">Planlama Tarihi</label>
                        <input type="date" class="form-control" id="editVisitPlannedDate" name="PlannedDate" required>
                    </div>

                    <div class="form-group">
                        <label for="editVisitActualDate">Ziyaret Tarihi</label>
                        <input type="date" class="form-control" id="editVisitActualDate" name="ActualDate">
                    </div>

                    <div class="form-group">
                        <label for="editVisitDescription">Açıklama</label>
                        <textarea class="form-control" id="editVisitDescription" name="Information"></textarea>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Edit Visit Record Modal -->
<div class="modal fade" id="editMissionModal" tabindex="-1" aria-labelledby="editMissionModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMissionModalLabel">Görev Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editMissionForm">
                    <input type="hidden" id="editMissionId" name="Id" />

                    <div class="form-group">
                        <label for="editMissionPlannedDate">Planlama Tarihi</label>
                        <input type="date" class="form-control" id="editMissionPlannedDate" name="PlannedDate" required>
                    </div>

                    <div class="form-group">
                        <label for="editMissionActualDate">Ziyaret Tarihi</label>
                        <input type="date" class="form-control" id="editMissionActualDate" name="ActualDate">
                    </div>

                    <div class="form-group">
                        <label for="editMissionDescription">Açıklama</label>
                        <textarea class="form-control" id="editMissionDescription" name="Information"></textarea>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Edit Phone Call Record Modal -->
<div class="modal fade" id="editPhoneCallRecordModal" tabindex="-1" aria-labelledby="editPhoneCallRecordModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editPhoneCallRecordModalLabel">Telefon Arama Kaydı Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editPhoneCallRecordForm">
                    <input type="hidden" id="editPhoneCallRecordId" name="Id" />

                    <div class="form-group">
                        <label for="editPhoneCallPlannedDate">Planlama Tarihi</label>
                        <input type="date" class="form-control" id="editPhoneCallPlannedDate" name="PlannedDate"
                            required>
                    </div>

                    <div class="form-group">
                        <label for="editPhoneCallActualDate">Arama Tarihi</label>
                        <input type="date" class="form-control" id="editPhoneCallActualDate" name="ActualDate">
                    </div>

                    <div class="form-group">
                        <label for="editPhoneCallDescription">Açıklama</label>
                        <textarea class="form-control" id="editPhoneCallDescription" name="Information"
                            required></textarea>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Add Location Modal -->
<div class="modal fade" id="addLocationModal" tabindex="-1" aria-labelledby="addLocationModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addLocationModalLabel">Yeni Lokasyon Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addLocationForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="locationDescription">Tanım</label>
                        <input type="text" class="form-control" id="locationDescription" name="Description" required>
                    </div>
                    <div class="form-group">
                        <label for="locationAddress">Adres</label>
                        <input type="text" class="form-control" id="locationAddress" name="Address" required>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div><!-- Add Offer Modal -->
<div class="modal fade custom-wide-modal2" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addOfferModalLabel">Yeni Teklif Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="overflow-y: auto; max-height: calc(95vh - 120px); padding: 20px;">
                <form id="addOfferForm" enctype="multipart/form-data">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="customerName">Müşteri Adı</label>
                            <input type="text" class="form-control" id="customerName" name="customerName"
                                value="@Model.Customer.Name" readonly />
                        </div>
                        <div class="form-group col-md-3">
                            <label for="width">En(mm) </label>
                            <input type="number" class="form-control" id="width" name="Width" placeholder="mm" required
                                min="0">
                        </div>
                        <div class="form-group col-md-3">
                            <label for="height">Boy(mm) </label>
                            <input type="number" class="form-control" id="height" name="Height" placeholder="mm"
                                required min="0">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="paperInfo">Kağıt Bilgisi</label>
                            <select name='tags-outside' class="form-control" id="paperInfo"
                                placeholder="Bir seçenek seçiniz..." value=""> </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="adhesiveInfo">Tutkal
                                Bilgisi</label>
                            <select name='tags-outside' class="form-control" id="adhesiveInfo"
                                placeholder="Bir seçenek seçiniz... " value=""> </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="isPrinted">Baskılı / Baskısız</label>
                            <select class="form-control" id="isPrinted" name="IsPrinted"
                                onchange="toggleColorOptions()">
                                <option value="true" selected>Baskılı</option>
                                <option value="false">Baskısız</option>
                            </select>
                        </div>


                        <div class="form-group col-md-6" id="colorOptions" style="display: none;">
                            <label for="numberOfColors">Renk Sayısı</label>
                            <select class="form-control" id="numberOfColors" name="NumberOfColors">
                                <option value="1">1 Renk</option>
                                <option value="2">2 Renk</option>
                                <option value="3">3 Renk</option>
                                <option value="4" selected>4 Renk</option> <!-- Varsayılan olarak 4 seçili -->
                                <option value="5">5 Renk</option>
                                <option value="6">6 Renk</option>
                                <option value="7">7 Renk</option>
                                <option value="8">8 Renk</option>
                            </select>
                        </div>


                        <div class="form-group col-md-6">
                            <label for="AdditionalProcessing">İlave İşlem</label>
                            <select name="AdditionalProcessing" class="form-control" id="AdditionalProcessing"
                                placeholder="İlave İşlem Seçiniz" multiple="multiple"></select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="orderQuantity">Sipariş
                                Miktarı</label>
                            <input type="text" class="form-control" id="orderQuantity" name="OrderQuantity"
                                placeholder="Miktar giriniz..." required>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="orderMethod">Sipariş Birimi</label>
                            <select name='tags-outside' class="form-control" id="orderMethod"
                                placeholder="Bir seçenek seçiniz..." value=""> </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="deliveryMethod">Teslim Şekli</label>
                            <select name='tags-outside' class="form-control" id="deliveryMethod"
                                placeholder="Bir seçenek seçiniz..." value=""> </select>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="PaymentMethod">Ödeme Methodu</label>
                            <select class="form-control" id="PaymentMethod" name="PaymentMethod">
                                <option value="Havale" selected>Havale</option>
                                <option value="Çek">Çek</option>

                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="paymentTerm">Ödeme Vadesi</label>
                            <select class="form-control" id="paymentTerm" name="PaymentTerm">
                                <option value="">Seçiniz...</option>
                                <option value="15">15 Gün</option>
                                <option value="30" selected>30 Gün</option>
                                <option value="45">45 Gün</option>
                                <option value="60">60 Gün</option>
                                <option value="75">75 Gün</option>
                                <option value="90">90 Gün</option>
                                <option value="105">105 Gün</option>
                                <option value="120">120 Gün</option>
                                <option value="135">135 Gün</option>
                                <option value="150">150 Gün</option>
                                <option value="165">165 Gün</option>
                                <option value="180">180 Gün</option>
                            </select>
                        </div>

                        <div class="form-group col-md-6">
                            <label for="productName">Teklif Adı</label>
                            <input type="text" class="form-control" id="productName" name="ProductName">
                        </div>

                        <div class="form-group col-md-6">
                            <label for="offerPicture">Ürün Resmi</label>
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="offerPicture" name="OfferPicture"
                                    accept=".jpg, .jpeg, .png, .gif">
                                <label class="custom-file-label" for="offerPicture">Dosya seçin...</label>
                            </div>

                            <!-- Mobile Camera Button -->
                            <button type="button" id="mobileCameraButton"
                                class="btn btn-primary d-none d-md-none">Kamerayı Aç</button>

                            <!-- Hidden File Input for Camera -->
                            <input type="file" class="d-none" id="mobileCameraInput" name="mobileCameraInput"
                                accept=".jpg, .jpeg, .png, .gif">

                            <!-- Image Preview -->
                            <img id="OfferPicturePreview" src="#" alt="Preview" class="img-preview"
                                style="margin-top: 10px;" />
                        </div>

                        <div class="form-group col-md-12">
                            <div class="form-check mb-3 d-flex align-items-center">
                                <input class="form-check-input me-2" type="checkbox" id="sendEmail" name="SendEmail"
                                    checked>
                                <label class="form-check-label" for="sendEmail">
                                    Yöneticiye Mail Gönder
                                </label>
                            </div>

                        </div>
                        <div class="form-group col-md-12">
                            <label for="description">Açıklama</label>
                            <textarea placeholder="Dilerseniz açıklama ekleyebilirsiniz." class="form-control"
                                id="description" name="Description" style="height: 75px; resize: none;"></textarea>
                            <small id="wordCountMessage" style="color: red; display: none;"> 30 kelime sınırına
                                ulaşıldı.</small>
                        </div>
                        <div class="form-group col-md-12">
                            <button type="submit" class="btn btn-outline-dark mb-3 btn-lg"> Kaydet <i
                                    class="fa fa-check" aria-hidden="true"></i>
                        </div>


                    </div>

                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="visitRecordModal" tabindex="-1" aria-labelledby="visitRecordModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="visitRecordModalLabel">Ziyaret Kaydı Oluştur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="visitRecordForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="plannedVisitDate">Planlama Tarihi</label>
                        <input type="date" class="form-control plannedVisitDate" id="plannedVisitDate"
                            class="plannedVisitDate" name="PlannedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="visitDate">Ziyaret Tarihi</label>
                        <input type="date" class="form-control" id="visitDate" name="ActualDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="visitDescription">Açıklama</label>
                        <textarea class="form-control" id="visitDescription" name="Information"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="missionModal" tabindex="-1" aria-labelledby="missionModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="missionModalLabel">Görev Oluştur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="missionForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="plannedMissionDate">Görev Planlama Tarihi</label>
                        <input type="date" class="form-control plannedVisitDate" id="plannedMissionDate"
                            name="PlannedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="missionDate">Görev Gerçekleşme Tarihi</label>
                        <input type="date" class="form-control" id="missionDate" name="ActualDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="missionDescription">Açıklama</label>
                        <textarea class="form-control" id="missionDescription" name="Information"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>

            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="phoneCallRecordModal" tabindex="-1" aria-labelledby="phoneCallRecordModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="phoneCallRecordModalLabel">Telefon Arama Kaydı Oluştur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="phoneCallRecordForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="plannedVisitDate">Planlama Tarihi</label>
                        <input type="date" class="form-control plannedVisitDate" id="plannedVisitDate"
                            name="PlannedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="visitDate">Arama Tarihi</label>
                        <input type="date" class="form-control" id="visitDate" name="ActualDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="visitDescription">Açıklama</label>
                        <textarea class="form-control" id="visitDescription" name="Information"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div><!-- Edit Email Record Modal -->
<div class="modal fade" id="editEmailRecordModal" tabindex="-1" aria-labelledby="editEmailRecordModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editEmailRecordModalLabel">E-Posta Kaydı Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editEmailRecordForm">
                    <input type="hidden" id="editEmailRecordId" name="Id" />

                    <div class="form-group">
                        <label for="editEmailPlannedDate">Planlama Tarihi</label>
                        <input type="date" class="form-control" id="editEmailPlannedDate" name="PlannedDate" required>
                    </div>

                    <div class="form-group">
                        <label for="editEmailActualDate">Gönderim Tarihi</label>
                        <input type="date" class="form-control" id="editEmailActualDate" name="ActualDate">
                    </div>

                    <div class="form-group">
                        <label for="editEmailDescription">Açıklama</label>
                        <textarea class="form-control" id="editEmailDescription" name="Information"></textarea>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div><!-- Edit Email Record Modal -->
<div class="modal fade" id="editSampleRecordModal" tabindex="-1" aria-labelledby="editSampleRecordModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editSampleRecordModalLabel">Numune Kaydı Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editSampleRecordForm">
                    <input type="hidden" id="editSampleId" name="Id" />

                    <div class="form-group">
                        <label for="editSamplePlannedDate">Planlama Tarihi</label>
                        <input type="date" class="form-control" id="editSamplePlannedDate" name="PlannedDate" required>
                    </div>

                    <div class="form-group">
                        <label for="editSampleActualDate">Gönderim Tarihi</label>
                        <input type="date" class="form-control" id="editSampleActualDate" name="ActualDate">
                    </div>

                    <div class="form-group">
                        <label for="editSampleDescription">Açıklama</label>
                        <textarea class="form-control" id="editSampleDescription" name="Information"
                            required></textarea>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="emailRecordModal" tabindex="-1" aria-labelledby="emailRecordModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="emailRecordModalLabel">E-Posta Kaydı Oluştur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="emailRecordForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="plannedVisitDate">Planlama Tarihi</label>
                        <input type="date" class="form-control plannedVisitDate" id="plannedVisitDate"
                            name="PlannedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="visitDate">E-posta Gönderim Tarihi</label>
                        <input type="date" class="form-control" id="visitDate" name="ActualDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="visitDescription">Açıklama</label>
                        <textarea class="form-control" id="visitDescription" name="Information"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="sampleRecordModal" tabindex="-1" aria-labelledby="sampleRecordModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sampleRecordModalLabel">Numune Çalışma Kaydı Oluştur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="sampleRecordForm">
                    <input type="hidden" id="customerId" name="CustomerId" value="@Model.Customer.Id" />
                    <div class="form-group">
                        <label for="plannedVisitDate">Planlama Tarihi</label>
                        <input type="date" class="form-control plannedVisitDate" id="plannedVisitDate"
                            name="PlannedDate" required>
                    </div>
                    <div class="form-group">
                        <label for="visitDate">Gerçekleşme Tarihi</label>
                        <input type="date" class="form-control " id="visitDate" name="ActualDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="visitDescription">Açıklama</label>
                        <textarea class="form-control" id="visitDescription" name="Information"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Edit Contact Modal -->
<div class="modal fade" id="editContactModal" tabindex="-1" aria-labelledby="editContactModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editContactModalLabel">İrtibat Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editContactForm">
                    <input type="hidden" id="editContactId" name="Id" value="1" />
                    <input type="hidden" id="editContactCustomerId" name="CustomerId" value="2" />

                    <div class="form-group">
                        <label for="editContactTitle">Ünvan</label>
                        <input type="text" class="form-control" id="editContactTitle" name="Title">

                    </div>

                    <div class="form-group">
                        <label for="editContactFullName">İsim Soyisim</label>
                        <input type="text" class="form-control" id="editContactFullName" name="FullName" required>
                    </div>

                    <div class="form-group">
                        <label for="editContactGender">Cinsiyet</label>
                        <select class="form-control" id="editContactGender" name="Gender" required>

                            <option value="Erkek">Erkek</option>
                            <option value="Kadın">Kadın</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="editContactPhoneNumber">Telefon Numarası</label>
                        <input type="tel" class="form-control" id="editContactPhoneNumber" name="PhoneNumber" required
                            pattern="[0-9]*">
                    </div>


                    <div class="form-group">
                        <label for="editContactEmail">E-Posta</label>
                        <input type="email" class="form-control" id="editContactEmail" name="Email">
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>


            </div>
        </div>
    </div>
</div>
<!-- Edit Location Modal -->
<div class="modal fade" id="editLocationModal" tabindex="-1" aria-labelledby="editLocationModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editLocationModalLabel">Lokasyon Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editLocationForm">
                    <input type="hidden" id="editLocationId" name="Id" />
                    <input type="hidden" id="editLocationCustomerId" name="CustomerId" />
                    <div class="form-group">
                        <label for="editLocationDescription">Tanım</label>
                        <input type="text" class="form-control" id="editLocationDescription" name="Description"
                            required>
                    </div>
                    <div class="form-group">
                        <label for="editLocationAddress">Adres</label>
                        <input type="text" class="form-control" id="editLocationAddress" name="Address" required>
                    </div>

                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Edit Customer Modal -->
<div class="modal fade" id="editCustomerModal" tabindex="-1" aria-labelledby="editCustomerModalLabel" aria-hidden="true"
    data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCustomerModalLabel">Müşteri Düzenle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editCustomerForm">
                    <div class="form-group">
                        <label for="editCustomerName">Ad</label>
                        <input type="text" class="form-control" id="editCustomerName" name="Name"
                            value="@Model.Customer.Name" required>
                    </div>
                    <div class="form-group">
                        <label for="editCustomerSector">Sektör</label>
                        <div class="input-group">
                            <select class="form-control" id="editCustomerSector" name="Sector" required>
                                <option value="">Seçiniz</option>
                                @if (ViewBag.Sectors != null)
                                {
                                @foreach (var sector in ViewBag.Sectors)
                                {
                                if (sector.Name == Model.Customer.Sector)
                                {
                                <option value="@sector.Name" selected>@sector.Name</option>
                                }
                                else
                                {
                                <option value="@sector.Name">@sector.Name</option>
                                }
                                }
                                }
                                else
                                {
                                <option value="">Veri yüklenemedi</option>
                                }
                            </select>
                            <div class="input-group-append">
                                <button type="button" class="btn btn-outline-danger"
                                    id="deleteEditSectorButton">Sil</button>
                            </div>
                        </div>
                        <div class="invalid-feedback">Lütfen sektörü seçin.</div>
                    </div>
                    <div class="form-group">
                        <label for="editCustomerNewSector">Yeni Sektör Ekle</label>
                        <input type="text" class="form-control" id="editCustomerNewSector" name="newSector">
                        <button type="button" class="btn btn-outline-dark mt-2" id="addEditSectorButton">Sektör Ekle<i
                                class="fa fa-plus" aria-hidden="true"></i></button>
                        <div class="invalid-feedback">Lütfen yeni sektör adını girin.</div>
                    </div>
                    <div class="form-group">
                        <label for="editCustomerCity">Şehir</label>
                        <select class="form-control" id="editCustomerCity" name="City" required>
                            <option value="">Seçiniz</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editCustomerDistrict">İlçe</label>
                        <select class="form-control" id="editCustomerDistrict" name="District" required>
                            <option value="">Seçiniz</option>
                        </select>
                    </div>

                    <input type="hidden" name="Id" value="@Model.Customer.Id" />
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg" id="submitButton">
                        Kaydet <i class="fa fa-save" aria-hidden="true"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="editCustomerCreatedByModal" tabindex="-1" aria-labelledby="editCustomerCreatedByModalLabel"
    aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editCustomerCreatedByModalLabel">Müşteri Sorumlusu Değiştir
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editCustomerCreatedByForm">
                    <div class="form-group">
                        <label for="createdById">Müşteri Sorumlusu</label>
                        <select class="form-control" id="createdById" name="CreatedById" required>
                            <option value="">Seçiniz</option>
                            @foreach (var user in ViewBag.Users)
                            {
                            <option value="@user.Id">@user.FirstName @user.LastName</option>
                            }
                            }
                        </select>
                    </div>
                    <input type="hidden" name="Id" value="@Model.Customer.Id" />
                    <input type="hidden" name="CreatedBy" id="createdBy" value="" />
                    <button type="submit" class="btn btn-outline-dark mb-3 btn-lg">Kaydet <i class="fa fa-save"
                            aria-hidden="true"></i></button>
                </form>
            </div>


        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<link rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/css/bootstrap-select.min.css">

<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<script>
 function toggleCardBody(button) {
        const card = button.closest('.card');
        const body = card.querySelector('.card-body');
        const icon = button.querySelector('i');

        if (body.style.display === 'none') {
            body.style.display = '';
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-up');
        } else {
            body.style.display = 'none';
            icon.classList.remove('fa-chevron-up');
            icon.classList.add('fa-chevron-down');
        }
    }
    $('#addRecipeModal').on('hidden.bs.modal', function () {
    // Formu sıfırla
    $('#addRecipeForm')[0].reset();

 

    // Renk sayısı varsa temizle ve gizle
    $('#recipeNumberOfColors').val('').closest('.form-group').hide();

    // Not kutularını da sıfırla
    $('#recipteNoteToDesigner').val('');
    $('#recipeNoteForProduction').val('');

    // Her şeyi sıfırla ama hidden CustomerId gibi değerleri istersen koruyabilirsin
});$(document).on('click', '.copy-offerrecipe-btn', function () {
    const offerId = $(this).data('offer-id');
    const isUsed = String($(this).data('used')) === "true";
    const recipeId = $(this).data('recipe-id'); // ✅ artık recipeId'yi kullanıyoruz
    if (isUsed) {
        // Bu if bloğunda kalacak, dışarı çıkmayacak
        Swal.fire({
            icon: 'info',
            title: 'Zaten Reçeteleştirildi',
            text: 'Bu teklif zaten reçeteye dönüştürülmüş. Reçeteye gitmek ister misiniz?',
            showCancelButton: true,
            confirmButtonText: 'Evet, Git',
            cancelButtonText: 'Hayır'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/erp/recipeDetail/${recipeId}`;
            }
        });

        return false; // 🛑 Dışarıya sızma, alttaki $.get kısmı tetiklenmesin
    }

    // ⬇⬇⬇ Sadece kullanılmamış offerlar için çalışır
    $.get(`/Customer/GetOfferById/${offerId}`, function (data) {
        if (!data) return Swal.fire('Hata', 'Teklif verisi alınamadı.', 'error');

        $('#addRecipeForm')[0].reset();

        if (data.width) $('#recipeWidth').val(data.width);
        if (data.height) $('#recipeHeight').val(data.height);
        if (data.orderQuantity) $('#recipeQuantity').val(data.orderQuantity);
        if (data.productName) {
            $('#RecipeName').val(data.productName);
            $('#recipeCustomerCode').val(data.productName);
        }

        if (typeof data.isPrinted === 'boolean') {
            $('#recipeIsPrinted').val(data.isPrinted.toString()).trigger('change');
        }

        if (data.paperInfo?.id && data.paperInfo?.name) {
            setSelect2Option('#recipePaperInfo', data.paperInfo.id, data.paperInfo.name);
        }

        if (data.adhesiveInfo?.id && data.adhesiveInfo?.name) {
            setSelect2Option('#recipeAdhesiveInfo', data.adhesiveInfo.id, data.adhesiveInfo.name);
        }

        if (data.orderMethod?.id && data.orderMethod?.name) {
            setSelect2Option('#recipeOrderMethod', data.orderMethod.id, data.orderMethod.name);
        }

        if (data.deliveryMethod?.id && data.deliveryMethod?.name) {
            setSelect2Option('#recipeShipmentMethod', data.deliveryMethod.id, data.deliveryMethod.name);
        }

        if (Array.isArray(data.additionalProcessings) && data.additionalProcessings.length > 0) {
            const selectedIds = data.additionalProcessings.map(x => x.id);
            $('#recipePrintType').val(selectedIds).trigger('change');
        }

        $('#addRecipeModal').modal('show');
    });
});



function setSelect2Option(selector, id, text) {
    const option = new Option(text, id, true, true);
    $(selector).append(option).trigger('change');
}

    function getRecipe(id) {
    console.log('💥 getRecipe çağrıldı — ID:', id);

    $('#editRecipeForm')[0].reset(); // Formu temizle
    $('#editRecipeModal').modal('hide'); // Modali garanti kapat

    $.ajax({
        url: '/Customer/GetRecipeById?id=' + id,
        type: 'GET',
        success: function (response) {
            console.log('✅ Sunucudan gelen cevap:', response);

            if (response.success) {
                var r = response.data;

                console.log('🔄 Form dolduruluyor...');
                $('#editRecipeId').val(r.id);
                $('#editRecipeCustomerId').val(r.customerId);
                $('#editRecipeCustomerName').val(r.customerName ?? '');

                $('#editRecipeName').val(r.recipeName);
                $('#editRecipeCustomerCode').val(r.customerCode);
                $('#editRecipeWidth').val(r.width);
                $('#editRecipeHeight').val(r.height);
                $('#editRecipeQuantity').val(r.quantity);
                $('#editRecipeUnitId').val(r.unitId).trigger('change');
                $('#editRecipePaperInfo').val(r.paperTypeId).trigger('change');
                $('#editRecipeAdhesiveInfo').val(r.paperAdhesionTypeId).trigger('change');
                $('#editRecipePaperDetail').val(r.paperDetailId).trigger('change');

                $('#editRecipePaymentMethod').val('Havale'); // default
                $('#editRecipePaymentTerm').val('30'); // default
                $('#editRecipeDeliveryMethod').val('').trigger('change');

                $('#editRecipeIsPrinted').val(r.isPrinted === true ? 'true' : 'false').trigger('change');
                $('#editRecipeNumberOfColors').val(r.numberOfColors).trigger('change');

                // ✅ AdditionalProcessingIds düzeltildi
                var printTypeSelect = $('#editRecipePrintType');
                var selectedIds = Array.isArray(r.additionalProcessings)
                    ? r.additionalProcessings.map(item => item.id)
                    : [];
                printTypeSelect.val(selectedIds).trigger('change');

                $('#editRecipeCustomerAdhesion').val(r.customerAdhesionTypeId).trigger('change');
                $('#editRecipePackage').val(r.packageTypeId).trigger('change');

                $('#editRecipeLabelPerWrap').val(r.labelPerWrap);
                $('#editRecipeOuterDiameter').val(r.outerDiameter);
                $('#editRecipeCoreLength').val(r.coreLengthId).trigger('change');
                $('#editRecipeCoreDiameter').val(r.coreDiameterId).trigger('change');
                $('#editRecipeShipmentMethod').val(r.shipmentMethodId).trigger('change');

                $('input[name="WindingDirectionType"][value="' + r.windingDirectionType + '"]').prop('checked', true);

                $('#editRecipeNoteToDesigner').val(r.noteToDesigner);
                $('#editRecipeNoteForProduction').val(r.noteForProduction);

                console.log('✅ Modal açılıyor...');
                $('#editRecipeModal').modal('show');
            } else {
                console.warn('❌ Başarısız cevap:', response.message);
                Swal.fire('Hata', response.message, 'error');
            }
        },
        error: function (xhr, status, error) {
            console.error('🚨 AJAX error:', status, error);
            Swal.fire('Hata', 'Reçete bilgileri alınamadı.', 'error');
        }
    });
}



$('#editRecipeForm').submit(function (e) {
    e.preventDefault();

    var formData = new FormData(this);

    $.ajax({
        url: '/customer/UpdateRecipe',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (data) {
            if (data.success) {
                $('#editRecipeModal').modal('hide');

                Toastify({
                    text: "Reçete başarıyla güncellendi Reçete detay sayfasına yönlendiriliyorsunuz!",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "green",
                }).showToast(5000);

                // ✅ Güncellenen reçete detay sayfasına yönlendir
                window.location.href = '/erp/recipeDetail/' + data.id;
            } else {
                alert(data.message || "Güncelleme başarısız.");
            }
        },
        error: function () {
            alert('Sunucu hatası oluştu.');
        }
    });
});


    document.addEventListener('DOMContentLoaded', function () {
        const input = document.getElementById('recipeLabelPerWrap');

        input.addEventListener('input', function (e) {
            let value = input.value.replace(/\./g, '').replace(/\D/g, '');
            if (value) {
                input.value = Number(value).toLocaleString('tr-TR');
            } else {
                input.value = '';
            }
        });

        // Form submit edilmeden önce noktalardan arındır (istersen burada kullanırsın)
        const form = input.closest('form');
        if (form) {
            form.addEventListener('submit', function () {
                input.value = input.value.replace(/\./g, '');
            });
        }
    });
    function toggleImage(imageUrl, imageId, buttonId) {
        var imageElement = document.getElementById(imageId);
        var buttonElement = document.getElementById(buttonId);

        // Eğer resim gizliyse, göster ve URL'yi ayarla
        if (imageElement.style.display === 'none' || imageElement.style.display === '') {
            imageElement.src = imageUrl; // Resmin URL'sini ayarla
            imageElement.style.display = 'block'; // Resmi görünür yap
            buttonElement.style.display = 'none'; // "Resmi Gör" butonunu gizle
        } else {
            imageElement.style.display = 'none'; // Resmi gizle
            buttonElement.style.display = 'block'; // Butonu tekrar görünür yap (eğer resim gizlendi)
        }
    }
    $(document).ready(function () {
        function setTodayAsDefault(selector) {
            $(selector).val(new Date().toISOString().split('T')[0]); // YYYY-MM-DD formatında ayarlar
        }

        $('.modal').on('shown.bs.modal', function () {
            // Modal içindeki plannedVisitDate input'unu güncelle
            $(this).find('.plannedVisitDate').val(new Date().toISOString().split('T')[0]);
        });
    });

    function setTodayAsDefault(inputId) {
        var today = new Date();
        var day = String(today.getDate()).padStart(2, '0');
        var month = String(today.getMonth() + 1).padStart(2, '0');  // Aylar 0-11 arası olduğu için +1
        var year = today.getFullYear();

        var formattedDate = year + '-' + month + '-' + day;
        $(inputId).val(formattedDate);  // ID'yi parametre olarak alıp uygun elemana değeri set ediyoruz
        console.log("Tarih ayarlandı: " + $(inputId).val());
    }

    $(document).ready(function () {


        // Tüm not butonlarını kontrol et

        $("button[data-target='#addNoteModal']").each(function () {
            const note = $(this).data("note"); // Mevcut notu al
            if (note) {
                $(this).text("").append(' <i class="fa fa-edit"></i>'); // Buton metni
            } else {
                $(this).text("Not Ekle").append(' <i class="fa fa-plus"></i>'); // Buton metni
            }
        });
    });
    $("#addNoteForm").on("submit", function (e) {
        e.preventDefault(); // Sayfa yenilemeyi engelle
    }); $("#addNoteModal").off("show.bs.modal").on("show.bs.modal", function (event) {
        const button = $(event.relatedTarget); // Modal'ı açan butona erişim
        const note = button.data("note"); // Mevcut notu al
        const customerId = button.data("customer-id"); // Müşteri ID'sini al

        const modal = $(this);
        modal.find("#note").val(note || ""); // Not varsa doldur, yoksa boş bırak
        modal.find("#saveNoteButton").data("customer-id", customerId); // Kaydet butonuna müşteri ID'sini ata

        // Modal başlığını ve düğme metnini güncelle
        if (note) {
            modal.find(".modal-title").text("Notu Düzenle");
            modal.find("#saveNoteButton").text("Notu Güncelle");
        } else {
            modal.find(".modal-title").text("Not Ekle");
            modal.find("#saveNoteButton").text("Notu Kaydet");
        }
    });


    $("#saveNoteButton").on("click", function () {
        const note = $("#note").val().trim();
        const customerId = $(this).data("customer-id");

        if (note) {
            $.ajax({
                url: "/customer/AddNoteToCustomer",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ note: note, customerId: customerId }),
                success: function () {
                    Toastify({
                        text: "Not başarıyla kaydedildi!",
                        duration: 3000,
                        close: false,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "green",
                    }).showToast();

                    setTimeout(() => {
                        $("#addNoteModal").modal("hide");
                        location.reload();
                    }, 2000); // 2 saniye bekle
                },
                error: function (xhr) {
                    Toastify({
                        text: "Hata: " + xhr.responseText,
                        duration: 3000,
                        close: false,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "red",
                    }).showToast();
                },
            });
        } else {
            Toastify({
                text: "Not alanı boş bırakılamaz!",
                duration: 3000,
                close: false,
                gravity: "top",
                position: "right",
                backgroundColor: "red",
            }).showToast();
        }
    });

    function formatPhoneNumber(input) {
        let value = input.value.replace(/\D/g, ""); // Tüm harf ve özel karakterleri kaldır

        // Başında 0 yoksa ekle
        if (!value.startsWith("0")) {
            value = "0" + value;
        }

        // Formatı uygula
        let formatted = "";
        if (value.length > 0) {
            formatted = value.substring(0, 1); // İlk hane (0)
        }
        if (value.length > 1) {
            formatted += " " + value.substring(1, 4); // Alan kodu
        }
        if (value.length > 4) {
            formatted += " " + value.substring(4, 7); // İlk üçlü grup
        }
        if (value.length > 7) {
            formatted += " " + value.substring(7, 9); // İlk ikili grup
        }
        if (value.length > 9) {
            formatted += " " + value.substring(9, 11); // Son ikili grup
        }

        input.value = formatted;
    }
    $(document).ready(function () {
        $('.table').on('click', '.change-approval', function () {
            const badge = $(this);
            const contactId = badge.data('id');
            const currentStatus = badge.data('status') === true || badge.data('status') === 'True';
            const newStatus = !currentStatus;


            Swal.fire({
                title: 'Onay Durumunu Değiştir',
                text: `Bu irtibatın durumunu '${currentStatus ? 'Onaysız ⚠️' : 'Onaylı ✅'}' olarak değiştirmek istiyor musunuz?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, değiştir!',
                cancelButtonText: 'Hayır, vazgeç'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/customer/ApproveContact',
                        type: 'POST',
                        contentType: 'application/x-www-form-urlencoded',
                        data: { id: contactId }, // Sadece "id" gönderiliyor
                        success: function (response) {
                            if (response.success) {
                                // Onay durumu başarıyla değişti
                                badge.data('status', response.isApproved);
                                badge.text(response.isApproved ? 'Onaylı ✅' : 'Onaysız ⚠️');
                                badge.removeClass('badge-success badge-warning');
                                badge.addClass(response.isApproved ? 'badge-success' : 'badge-warning');

                                Toastify({
                                    text: response.message,
                                    duration: 3000,
                                    close: false,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: response.isApproved ? "#28a745" : "#28a745",
                                    stopOnFocus: true
                                }).showToast();
                            } else {
                                Toastify({
                                    text: response.message,
                                    duration: 3000,
                                    close: false,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#dc3545",
                                    stopOnFocus: true
                                }).showToast();
                            }
                        },
                        error: function () {
                            Toastify({
                                text: 'Onay değiştirmek için yetkinizin bulunduğundan emin olun.',
                                duration: 3000,
                                close: false,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#dc3545",
                                stopOnFocus: true
                            }).showToast();
                        }
                    });
                }
            });
        });
    });

    $('#editOfferModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Modal'ı açan butonu al
        var isCopy = button.data('copy'); // "copy" işlemi olup olmadığını kontrol et
        var modal = $(this);

        // Modal başlığını ayarla
        if (isCopy) {
            modal.find('.modal-title').text('Teklif Kopyala');
            modal.find('button[type="submit"]').html('Yeni Teklif Ekle <i class="fa fa-copy" aria-hidden="true"></i>');
        } else {
            modal.find('.modal-title').text('Teklifi Düzenle');
            modal.find('button[type="submit"]').html('Güncelle <i class="fa fa-save" aria-hidden="true"></i>');
        }
    });

    let isCopy = false; // Kopyalama durumunu izlemek için global değişken

    $(document).on('click', '.copy-offer-btn', function () {
        var offerId = $(this).data('offer-id');
        isCopy = true; // Kopyalama modunu aktif hale getir

        // Teklif bilgilerini backend'den al
        $.ajax({
            url: '/Offer/GetOfferDetails', // Teklif detaylarını döndüren endpoint
            type: 'GET',
            data: { id: offerId },
            success: function (data) {
                if (data) {
                    // Teklif bilgilerini edit modal içine yerleştir
                    $('#editOfferModal').find('input[name="offerName"]').val(data.name);
                    $('#editOfferModal').find('input[name="offerPrice"]').val(data.price);
                    $('#editOfferModal').find('input[name="orderQuantity"]').val(data.orderQuantity);
                    $('#editOfferModal').find('select[name="isPrinted"]').val(data.isPrinted ? "true" : "false").trigger('change');
                    $('#editOfferModal').find('input[name="numberOfColors"]').val(data.numberOfColors);
                    $('#editOfferModal').find('input[name="currency"]').val(data.currency);

                    // AdditionalProcessing Select2 değerlerini ayarla
                    var additionalProcessingSelect = $('#editAdditionalProcessing');
                    additionalProcessingSelect.val(data.additionalProcessingIds).trigger('change');

                    // Modali göster
                    $('#editOfferModal').modal('show');
                }
            }
        });
    });
    document.addEventListener('DOMContentLoaded', function () {
        const noteTextarea = document.getElementById('note');
        const remainingCharacters = document.getElementById('remainingCharacters');
        const maxLength = 100;

        noteTextarea.addEventListener('input', function () {
            const currentLength = noteTextarea.value.length;
            const remaining = maxLength - currentLength;
            remainingCharacters.textContent = remaining >= 0 ? remaining : 0;
        });
    });

    // Sadece 'clickable-row' sınıfına sahip satırlara tıklama olayı ekleyin
    $(document).on('click', '.clickable-row', function () {
        var offerId = $(this).data('offer-id');
        window.location.href = '/customer/offerdetails/' + offerId;
    });

    // Modal kapandığında kopyalama modunu sıfırla
    $('#editOfferModal').on('hidden.bs.modal', function () {
        isCopy = false; // Kopyalama modunu kapat
    });

    $('.dropdown-toggle').on('click', function () {
        $(this).next('.dropdown-menu').toggle();
    });

    function toggleOfferStatus(button) {
        const offerId = $(button).data("offer-id");
        const hasPrice = $(button).data("has-price"); // Fiyat bilgisi kontrolü

        if (!hasPrice) {
            Swal.fire({
                icon: 'warning',
                title: 'Fiyat Bilgisi Eksik',
                text: 'Fiyat bilgisi olmadan bu durum güncellenemez!',
                confirmButtonText: 'Tamam',
                customClass: {
                    confirmButton: 'custom-confirm-button w-100'
                }
            });
            return; // Fiyat bilgisi yoksa işlem durdurulur
        }

        Swal.fire({
            title: 'Durum Seçin',
            html: `
            <ul id="offer-status-list" class="offer-status-list">
                <li data-value="NotDelivered">Müşteriye iletilmedi ❕</li>
                <li data-value="Delivered" class="${!hasPrice ? 'disabled-option' : ''}">Müşteriye iletildi ⏳</li>
                <li data-value="Won" class="${!hasPrice ? 'disabled-option' : ''}">İşi aldık ✅</li>
                <li data-value="Missed">İşi kaçırdık ❌</li>
            </ul>
        `,
            showCancelButton: true,
            cancelButtonText: 'İptal',
            showConfirmButton: false,
            customClass: {
                cancelButton: 'custom2-cancel-button w-100'
            },
            didOpen: () => {
                $('#offer-status-list li:not(.disabled-option)').off('click').on('click', function () {
                    const selectedStatus = $(this).data('value');
                    Swal.close();

                    if (selectedStatus === 'Missed') {
                        showMissedReason(offerId, button);
                    } else {
                        updateOfferStatus(offerId, selectedStatus, button);
                    }
                });
            }
        });

    }
    function updateOfferStatus(offerId, offerStatus, button) {
        const originalText = $(button).text(); // Orijinal buton metni kaydediliyor
        const originalClass = $(button).attr('class'); // Orijinal buton sınıfı kaydediliyor

        $.ajax({
            url: '@Url.Action("UpdateOfferPresentedStatus", "Customer")',
            type: 'POST',
            dataType: 'json',
            data: { id: offerId, offerStatus: offerStatus },
            beforeSend: function () {
                // Spinner başlatılıyor ve buton devre dışı bırakılıyor
                $(button).prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span>');
            },
            success: function (response) {
                if (response.success) {
                    Toastify({
                        text: response.message || "Durum başarıyla güncellendi!",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#4CAF50"
                    }).showToast();
                    location.reload();
                    // Başarılı olursa buton güncelleniyor
                    $(button).text(getOfferStatusDisplayName(offerStatus));
                    $(button)
                        .attr('class', getStatusButtonClass(offerStatus))
                        .data('offer-status', offerStatus);
                } else {
                    // Başarısız olursa hata mesajı gösteriliyor ve buton eski haline getiriliyor
                    showErrorToast(response.message || "Fiyat bilgisi olmadan bu durum seçilemez.");
                    restoreButton(button, originalText, originalClass);
                }
            },
            error: function (xhr) {
                console.error('Hata:', xhr.responseText);
                showErrorToast("Durum güncellenirken bir hata oluştu!");
                restoreButton(button, originalText, originalClass);
            },
            complete: function () {
                // Spinner kaldırılıyor ve buton aktif ediliyor
                $(button).prop('disabled', false);
            }
        });
    }

    function restoreButton(button, text, className) {
        $(button).text(text).attr('class', className); // Buton eski metin ve sınıfına geri döndürülüyor
    }

    function showErrorToast(message) {
        Toastify({
            text: message,
            duration: 3000,
            gravity: "top",
            position: "right",
            backgroundColor: "#FF0000"
        }).showToast();
    }


    function showMissedReason(offerId, button) {
        Swal.fire({
            title: 'Neden Seçin',
            html: `
            <ul id="missed-reason-list" class="missed-reason-list">
                <li data-value="HighPrice">Fiyat yüksek 💰</li>
                <li data-value="DeadlineIssue">Termin uymadı 📅</li>
                <li data-value="LowQuality">Kalite yetersiz ⚠️</li>
                <li data-value="Cancel">Proje İptal ❌</li>
                 <li data-value="Continuewithexisting">Mevcutla Devam ⛔️</li>
            </ul>
        `,
            showCancelButton: true,
            cancelButtonText: '<i class="fa fa-arrow-left" aria-hidden="true"></i> Geri',
            showConfirmButton: false,
            customClass: {
                cancelButton: 'custom2-back-button w-100'
            },
            didOpen: () => {
                $('#missed-reason-list li').on('click', function () {
                    const selectedReason = $(this).data('value');
                    Swal.close();
                    updateOfferStatus(offerId, selectedReason, button);
                });
            }
        }).then((result) => {
            if (result.dismiss === Swal.DismissReason.cancel) {
                toggleOfferStatus(button);
            }
        });
    }


    function getOfferStatusDisplayName(offerStatus) {
        switch (offerStatus) {
            case 'NotDelivered': return 'Teklif müşteriye iletilmedi ❕';
            case 'Delivered': return 'Teklif müşteriye iletildi ⏳';
            case 'Won': return 'İşi aldık ✅';
            case 'HighPrice': return 'Fiyat yüksek 💰';
            case 'DeadlineIssue': return 'Termin uymadı 📅';
            case 'LowQuality': return 'Kalite yetersiz ⚠️';
            case 'Cancel': return 'Proje İptal ❌';
            case 'Continuewithexisting': return 'Mevcutla Devam ⛔️';
            default: return 'Bilinmiyor';
        }
    }

    function getStatusButtonClass(offerStatus) {
        switch (offerStatus) {
            case 'NotDelivered': return 'btn btn-primary btn-lg';
            case 'Delivered': return 'btn btn-warning btn-lg';
            case 'Won': return 'btn btn-success btn-lg';
            case 'HighPrice':
            case 'DeadlineIssue':
            case 'LowQuality':
            case 'Cancel': return 'btn btn-danger btn-lg';
            case 'Continuewithexisting': return 'btn btn-danger btn-lg';
            default: return 'btn btn-secondary btn-lg';
        }
    }




    function toggleColorOptions() {
        var isPrinted = document.getElementById("isPrinted").value;
        var colorOptions = document.getElementById("colorOptions");
        var numberOfColors = document.getElementById("numberOfColors");

        if (isPrinted === "true") {
            // Baskılı seçildiğinde renk seçeneklerini göster ve düzenlemeye izin ver
            colorOptions.style.display = "block";
            numberOfColors.disabled = false;
            numberOfColors.value = 4; // Varsayılan olarak 4 Renk seçili
        } else {
            // Baskısız seçildiğinde renk sayısını 0 yap ve düzenlemeyi kapat
            colorOptions.style.display = "block"; // Gizlenmez, ama değer 0 olur
            numberOfColors.value = 0;
            numberOfColors.disabled = true;
        }
    }

    function edittoggleColorOptions() {
        var isPrinted = $('#editisPrinted').val() === "true";
        var colorOptions = document.getElementById("editcolorOptions");
        var numberOfColors = document.getElementById("editnumberOfColors");

        if (isPrinted) {
            // Baskılı seçildiğinde renk seçeneklerini göster ve düzenlemeye izin ver
            colorOptions.style.display = "block";
            numberOfColors.disabled = false;
            numberOfColors.value = 4; // Varsayılan olarak 4 Renk seçili
        } else {
            // Baskısız seçildiğinde renk sayısını 0 yap ve düzenlemeyi kapat
            colorOptions.style.display = "block"; // Gizlenmez, ama değer 0 olur
            numberOfColors.value = 0;
            numberOfColors.disabled = true;
        }
    }

    // DOM Elemanlarını Seçme
    const mobileCameraButton = document.getElementById('mobileCameraButton');
    const mobileCameraInput = document.getElementById('mobileCameraInput');
    const offerPicturePreview = document.getElementById('OfferPicturePreview');

    // Kamera Açma Butonuna Tıklayınca Kamera Input'unu Aç
    mobileCameraButton.addEventListener('click', () => {
        mobileCameraInput.click(); // Kamera Input'u tetiklenir
    });

    // Dosya Seçildiğinde veya Fotoğraf Çekildiğinde Çalışan Olay
    mobileCameraInput.addEventListener('change', function () {
        const file = this.files[0]; // İlk dosyayı seç
        if (file) {
            const reader = new FileReader(); // Dosya Okuyucu API'si
            reader.onload = function (e) {
                offerPicturePreview.src = e.target.result; // Resim kaynağını ayarla
                offerPicturePreview.style.display = 'block'; // Önizlemeyi göster
            };
            reader.readAsDataURL(file); // Dosyayı Base64 olarak oku
        }
    });
    document.addEventListener("DOMContentLoaded", function () {
        // Edit form alanlarını seç
        const widthInput = document.getElementById("editRecipeWidth");
        const heightInput = document.getElementById("editRecipeHeight");
        const paperInfoSelect = document.getElementById("editRecipePaperInfo");
        const adhesiveInfoSelect = document.getElementById("editRecipeAdhesiveInfo");
        const isPrintedSelect = document.getElementById("editRecipeIsPrinted");
        const recipeNameInput = document.getElementById("editRecipeName");

        function updateEditRecipeName() {
            const widthValue = widthInput.value ? widthInput.value.padStart(3, '0') : "";
            const heightValue = heightInput.value ? heightInput.value.padStart(3, '0') : "";

            const paperInfoValue = $(paperInfoSelect).find("option:selected").text() || "";
            const adhesiveInfoValue = $(adhesiveInfoSelect).find("option:selected").text() || "";
            const isPrintedValue = $(isPrintedSelect).find("option:selected").text();

            const generatedName = `${widthValue}X${heightValue} ${isPrintedValue} ${paperInfoValue} ${adhesiveInfoValue}`;

            if (recipeNameInput) {
                recipeNameInput.value = generatedName;
            }
        }

        // Değişiklikleri dinle
        widthInput.addEventListener("input", updateEditRecipeName);
        heightInput.addEventListener("input", updateEditRecipeName);
        $(paperInfoSelect).on("change", updateEditRecipeName);
        $(adhesiveInfoSelect).on("change", updateEditRecipeName);
        $(isPrintedSelect).on("change", updateEditRecipeName);

        // Modal her açıldığında da güncelle (gerekirse)
        $('#editRecipeModal').on('shown.bs.modal', function () {
            updateEditRecipeName();
        });
    });
    document.addEventListener("DOMContentLoaded", function () {
        // Form alanlarını seç
        const widthInput = document.getElementById("recipeWidth");
        const heightInput = document.getElementById("recipeHeight");
        const paperInfoSelect = document.getElementById("recipePaperInfo");
        const adhesiveInfoSelect = document.getElementById("recipeAdhesiveInfo");
        const productNameInput = document.getElementById("productName");
        const isPrintedSelect = document.getElementById("recipeIsPrinted");
        const recipeNameInput = document.getElementById("RecipeName"); // <<<< yeni ekledik

        // Ürün adı ve reçete adı otomatik oluşturma işlevi
        function updateNames() {
            const widthValue = widthInput.value ? widthInput.value.padStart(3, '0') : "";
            const heightValue = heightInput.value ? heightInput.value.padStart(3, '0') : "";

            const paperInfoValue = $(paperInfoSelect).find("option:selected").text() || "";
            const adhesiveInfoValue = $(adhesiveInfoSelect).find("option:selected").text() || "";
            const isPrintedValue = $(isPrintedSelect).find("option:selected").text();

            // Ürün adı oluştur
            const productName = `${widthValue}X${heightValue} ${isPrintedValue} ${paperInfoValue} ${adhesiveInfoValue}`;

            // İkisine de yaz
            if (productNameInput) {
                productNameInput.value = productName;
            }
            if (recipeNameInput) {
                recipeNameInput.value = productName; // Reçete adı da aynı formatta
            }
        }

        // Değişiklik olduğunda updateNames fonksiyonunu çağır
        widthInput.addEventListener("input", updateNames);
        heightInput.addEventListener("input", updateNames);
        $(paperInfoSelect).on("change", updateNames);
        $(adhesiveInfoSelect).on("change", updateNames);
        $(isPrintedSelect).on("change", updateNames);

        // Sayfa yüklendiğinde de otomatik oluştur
        updateNames();
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Form alanlarını seç
        const widthInput = document.getElementById("width");
        const heightInput = document.getElementById("height");
        const paperInfoSelect = document.getElementById("paperInfo");
        const adhesiveInfoSelect = document.getElementById("adhesiveInfo");
        const productNameInput = document.getElementById("productName");
        const isPrintedSelect = document.getElementById("isPrinted");

        // Ürün adını otomatik oluşturma işlevi
        function updateProductName() {
            // En ve boy değerlerini 3 basamaklı formata dönüştür
            const widthValue = widthInput.value ? widthInput.value.padStart(3, '0') : "";
            const heightValue = heightInput.value ? heightInput.value.padStart(3, '0') : "";

            // Kağıt ve tutkal bilgisi için seçilen değerleri al (Select2'dan seçilen değeri al)
            const paperInfoValue = $(paperInfoSelect).find("option:selected").text() || "";
            const adhesiveInfoValue = $(adhesiveInfoSelect).find("option:selected").text() || "";

            // Baskı durumu kontrolü (Seçilen baskı durumu)
            const isPrintedValue = $(isPrintedSelect).find("option:selected").text();

            // Ürün adını oluştur
            const productName = `${widthValue}X${heightValue} ${isPrintedValue} ${paperInfoValue} ${adhesiveInfoValue}`;

            // Ürün adı alanına otomatik olarak yaz
            productNameInput.value = productName;
        }


        // Değişiklik olduğunda updateProductName fonksiyonunu çağır
        widthInput.addEventListener("input", updateProductName);
        heightInput.addEventListener("input", updateProductName);
        $(paperInfoSelect).on("change", updateProductName);
        $(adhesiveInfoSelect).on("change", updateProductName);
        $(isPrintedSelect).on("change", updateProductName);

        // Sayfa yüklendiğinde varsayılan değerlerle ürün adını güncelle
        updateProductName();
    });
    document.addEventListener('DOMContentLoaded', function () {
        const editLabelInput = document.getElementById('editRecipeLabelPerWrap');
        const editDiameterInput = document.getElementById('editRecipeOuterDiameter');
        const editForm = editLabelInput?.closest('form');

        function toggleEditInputs() {
            const labelVal = editLabelInput.value.replace(/\./g, '').trim();
            const diameterVal = editDiameterInput.value.trim();

            if (labelVal !== '') {
                editDiameterInput.value = ''; // diğerini temizle
                editDiameterInput.disabled = true;
            } else if (diameterVal !== '') {
                editLabelInput.value = ''; // diğerini temizle
                editLabelInput.disabled = true;
            } else {
                editLabelInput.disabled = false;
                editDiameterInput.disabled = false;
            }
        }

        // 🔁 Modal her açıldığında input değerine göre kontrol yap
        $('#editOfferModal').on('shown.bs.modal', function () {
            toggleEditInputs();
        });

        // Değişim sırasında inputları dinle
        if (editLabelInput && editDiameterInput) {
            editLabelInput.addEventListener('input', function () {
                let value = editLabelInput.value.replace(/\./g, '').replace(/\D/g, '');
                editLabelInput.value = value ? Number(value).toLocaleString('tr-TR') : '';
                toggleEditInputs();
            });

            editDiameterInput.addEventListener('input', toggleEditInputs);
        }

        // Form gönderim validasyonu
       
    });
    document.addEventListener("DOMContentLoaded", function () {
        // Edit form alanlarını seç
        const editWidthInput = document.getElementById("editWidth");
        const editHeightInput = document.getElementById("editHeight");
        const editPaperInfoSelect = document.getElementById("editPaperInfo");
        const editAdhesiveInfoSelect = document.getElementById("editAdhesiveInfo");
        const editProductNameInput = document.getElementById("editproductName");
        const editIsPrintedSelect = document.getElementById("editisPrinted");

        // Ürün adı güncelleme fonksiyonu
        function editupdateProductName() {
            const selectedIsPrintedValue = $(editIsPrintedSelect).val(); // örn: 1, 2 vs.
            const selectedIsPrintedText = $(editIsPrintedSelect).find(`option[value="${selectedIsPrintedValue}"]`).text();

            const editWidthValue = editWidthInput.value ? editWidthInput.value.padStart(3, '0') : "";
            const editHeightValue = editHeightInput.value ? editHeightInput.value.padStart(3, '0') : "";
            const editPaperInfoValue = $(editPaperInfoSelect).find("option:selected").text() || "";
            const editAdhesiveInfoValue = $(editAdhesiveInfoSelect).find("option:selected").text() || "";

            const editProductName = `${editWidthValue}X${editHeightValue} ${selectedIsPrintedText} ${editPaperInfoValue} ${editAdhesiveInfoValue}`;
            editProductNameInput.value = editProductName;

            console.log("Ürün adı güncellendi:", editProductName);
        }

        // Değişiklikleri dinle
        editWidthInput.addEventListener("input", editupdateProductName);
        editHeightInput.addEventListener("input", editupdateProductName);
        $(editPaperInfoSelect).on("change", editupdateProductName);
        $(editAdhesiveInfoSelect).on("change", editupdateProductName);
        $(editIsPrintedSelect).on("change", editupdateProductName);



        // Modal her açıldığında güncelle
        $('#editOfferModal').on('shown.bs.modal', function () {
            // Değerler DOM’a yerleştikten sonra çalışması için küçük gecikme
            setTimeout(editupdateProductName, 50);
        });
    });

    document.getElementById("cameraButton").addEventListener("click", function () {
        document.getElementById("mobileCameraInput").click();
    });

    // Seçilen resmi önizleme olarak göster
    document.getElementById("mobileCameraInput").addEventListener("change", function (event) {
        const [file] = event.target.files;
        if (file) {
            const preview = document.getElementById("OfferPicturePreview");
            preview.src = URL.createObjectURL(file);
            preview.onload = () => URL.revokeObjectURL(preview.src); // Bellek temizleme
        }
    });
    document.addEventListener("DOMContentLoaded", function () {
        var selectElement = document.getElementById("city");

        // Sayfa yüklendiğinde ilk kontrol
        updateSelectBackground(selectElement);

        // Seçim yapıldığında veya değiştirildiğinde arka plan rengini güncelle
        selectElement.addEventListener("change", function () {
            updateSelectBackground(selectElement);
        });

        function updateSelectBackground(element) {
            if (element.value === "") { // Eğer değer boşsa (ilk seçenek)
                element.style.backgroundColor = "#f4cccc"; // Kırmızı arka plan
            } else {
                element.style.backgroundColor = "#ffffff"; // Beyaz arka plan
            }
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        toggleColorOptions();
    });
    $(document).ready(function () {
        let cachedCustomerData = [];
        let cachedPaperInfoData = [];
        let cachedAdhesiveInfoData = [];
        let cachedPaperDetailData = [];
        let cachedCustomerAdhesionData = [];
        let cachedCoreDiameterData = [];
        let cachedPackageData = [];
        let cachedCoreLengthData = [];
        let cachedAdditionalProcessings = [];
        let cachedDeliveryMethodData = [];
        let cachedOrderMethodData = [];

        // OFFER Modal(ADD) Select2 yüklemeleri
        loadData('/Customer/GetCustomerInfos', '#name', cachedCustomerData);
        loadData('/Customer/GetPaperInfos', '#paperInfo', cachedPaperInfoData);
        loadData('/Customer/GetAdhesiveInfos', '#adhesiveInfo', cachedAdhesiveInfoData);
        loadData('/Customer/GetAdditionalProcessings', '#AdditionalProcessing', cachedAdditionalProcessings);
        loadData('/Customer/GetDeliveryMethods', '#deliveryMethod', cachedDeliveryMethodData);
        loadData('/Customer/GetOrderMethods', '#orderMethod', cachedOrderMethodData);



        // OFFER Modal (EDIT) Select2 yüklemeleri
// OFFER Modal (EDIT) Select2 yüklemeleri — doğru ID'ler ve cache array'leri ile
loadData('/Customer/GetPaperInfos', '#editPaperInfo', cachedPaperInfoData);
loadData('/Customer/GetAdhesiveInfos', '#editAdhesiveInfo', cachedAdhesiveInfoData);
loadData('/Customer/GetAdditionalProcessings', '#editAdditionalProcessing', cachedAdditionalProcessings);
loadData('/Customer/GetDeliveryMethods', '#editDeliveryMethod', cachedDeliveryMethodData);
loadData('/Customer/GetOrderMethods', '#editOrderMethod', cachedOrderMethodData);


        // RECIPE Modal (ADD) Select2 yüklemeleri
        loadData('/Customer/GetPaperInfos', '#recipePaperInfo', cachedPaperInfoData);
        loadData('/Customer/GetCustomerAdhesion', '#recipeCustomerAdhesion', cachedCustomerAdhesionData);
        loadData('/Customer/GetPackage', '#recipePackage', cachedPackageData);
        loadData('/Customer/GetCoreLenght', '#recipeCoreLength', cachedCoreLengthData);
        loadData('/Customer/GetCoreDiameter', '#recipeCoreDiameter', cachedCoreDiameterData);
        loadData('/Customer/GetPaperDetails', '#recipePaperDetail', cachedPaperDetailData);
        loadData('/Customer/GetAdhesiveInfos', '#recipeAdhesiveInfo', cachedAdhesiveInfoData);
        loadData('/Customer/GetAdditionalProcessings', '#recipePrintType', cachedAdditionalProcessings);
        loadData('/Customer/GetDeliveryMethods', '#recipeShipmentMethod', cachedDeliveryMethodData);
        loadData('/Customer/GetOrderMethods', '#recipeOrderMethod', cachedOrderMethodData);

        // RECIPE Modal (EDIT) Select2 yüklemeleri
        loadData('/Customer/GetPaperInfos', '#editRecipePaperInfo', cachedPaperInfoData);
        loadData('/Customer/GetAdhesiveInfos', '#editRecipeAdhesiveInfo', cachedAdhesiveInfoData);
        loadData('/Customer/GetPaperDetails', '#editRecipePaperDetail', cachedPaperDetailData);
        loadData('/Customer/GetCustomerAdhesion', '#editRecipeCustomerAdhesion', cachedCustomerAdhesionData);
        loadData('/Customer/GetPackage', '#editRecipePackage', cachedPackageData);
        loadData('/Customer/GetCoreLenght', '#editRecipeCoreLength', cachedCoreLengthData);
        loadData('/Customer/GetCoreDiameter', '#editRecipeCoreDiameter', cachedCoreDiameterData);
        loadData('/Customer/GetAdditionalProcessings', '#editRecipePrintType', cachedAdditionalProcessings);
        loadData('/Customer/GetDeliveryMethods', '#editRecipeShipmentMethod', cachedDeliveryMethodData);
        loadData('/Customer/GetOrderMethods', '#editRecipeUnitId', cachedOrderMethodData);

        // Genel veri yükleme fonksiyonu
        function loadData(url, selectSelector, cacheData, callback) {
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    cacheData = data;
                    initializeSelect2(selectSelector, data);
                    if (callback) callback();
                },
                error: function (xhr, status, error) {
                    console.error(`${selectSelector} verileri yüklenirken hata oluştu:`, error);
                }
            });
        }

        // Select2 başlatıcı
        function initializeSelect2(selectSelector, data) {
            $(selectSelector).select2({
                placeholder: "Seçiniz",
                tags: selectSelector === '#name', // sadece müşteri için tag açık
                width: '100%',
                dropdownAutoWidth: false,
                dropdownParent: $(selectSelector).closest('.modal'),
                data: data.map(function (item) {
                    return {
                        id: item.id,
                        text: item.name || item.text || item.label || item.definition || item.Definition
                    };
                }),
                createTag: function (params) {
                    var term = $.trim(params.term);
                    if (term === '') return null;
                    return {
                        id: term,
                        text: term,
                        newOption: true
                    };
                },
                templateResult: function (data) {
                    var $result = $("<span></span>");
                    $result.text(data.text);
                    if (data.newOption) {
                        $result.append(" <em>(yeni)</em>");
                    }
                    return $result;
                },
                templateSelection: function (data) {
                    return data.text;
                }
            });
        }

        // RECIPE modal: Baskı kontrolü (ekliyorum çünkü onchange olayını istemiştin)
        window.toggleEditRecipeColorOptions = function () {
            const isPrinted = document.getElementById("editRecipeIsPrinted").value;
            const colorOptions = document.getElementById("editRecipeColorOptions");
            colorOptions.style.display = isPrinted === "true" ? "block" : "none";
        };
    });




    // PDF İndirme Fonksiyonu
    function generatePdfForSelectedOffers() {
        // Toastify ayarları ve seçili tekliflerin ID'lerini toplama
        const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        const selectedOffers = [];

        checkboxes.forEach(checkbox => {
            if (checkbox.value !== "on") { // selectAllOffers checkbox'ını hariç tutmak için
                selectedOffers.push(parseInt(checkbox.value));  // Integer'a dönüştürüyoruz
            }
        });

        if (selectedOffers.length > 0) {
            fetch("/customer/DownloadMultipleOffersPdf", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]').value // Eğer Anti-Forgery Token kullanıyorsanız
                },
                body: JSON.stringify({ offerIds: selectedOffers })  // DTO formatında JSON gönderiyoruz
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("PDF oluşturulamadı.");
                    }
                    return response.blob();
                })
                .then(blob => {
                    const link = document.createElement("a");
                    link.href = window.URL.createObjectURL(blob);
                    link.download = "SelectedOffers.pdf";
                    link.click();

                    // Başarılı olduğunda Toastify ile bilgilendirme
                    Toastify({
                        text: "Seçilen teklifler başarıyla indirildi.",
                        duration: 3000,  // 3 saniye gösterim süresi
                        gravity: "top", // toast konumu üstte
                        position: "right", // ortada konumlandırma
                        backgroundColor: "#4CAF50", // yeşil renk
                    }).showToast();
                })
                .catch(error => {
                    console.error("PDF indirme hatası:", error);

                    // Toastify ile hata mesajı
                    Toastify({
                        text: "Seçilen teklifler indirilemedi.",
                        duration: 3000,  // 3 saniye gösterim süresi
                        gravity: "top", // toast konumu üstte
                        position: "right", // ortada konumlandırma
                        backgroundColor: "#FF0000", // kırmızı renk
                    }).showToast();
                });
        } else {
            // Toastify ile en az bir teklif seçilmesi gerektiğini belirten uyarı
            Toastify({
                text: "Lütfen en az bir teklif seçiniz.",
                duration: 3000,  // 3 saniye gösterim süresi
                gravity: "top", // toast konumu üstte
                position: "right", // ortada konumlandırma
                backgroundColor: "#FFC107", // sarı renk
            }).showToast();
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const labelInput = document.getElementById('recipeLabelPerWrap');
        const diameterInput = document.getElementById('recipeOuterDiameter');
        const form = labelInput.closest('form');

        // Otomatik diğer alanı disable et
        function toggleInputs() {
            const labelVal = labelInput.value.replace(/\./g, '').trim();
            const diameterVal = diameterInput.value.trim();

            if (labelVal !== '') {
                diameterInput.disabled = true;
            } else if (diameterVal !== '') {
                labelInput.disabled = true;
            } else {
                labelInput.disabled = false;
                diameterInput.disabled = false;
            }
        }

        // Binlik format
        labelInput.addEventListener('input', function () {
            let value = labelInput.value.replace(/\./g, '').replace(/\D/g, '');
            if (value) {
                labelInput.value = Number(value).toLocaleString('tr-TR');
            } else {
                labelInput.value = '';
            }
            toggleInputs();
        });

        diameterInput.addEventListener('input', toggleInputs);

        // Submit sırasında kontrol + nokta silme
        if (form) {
            form.addEventListener('submit', function (e) {
                const labelVal = labelInput.value.replace(/\./g, '').trim();
                const diameterVal = diameterInput.value.trim();


                // Noktaları temizle
                labelInput.value = labelVal;
            });
        }
    });

    function toggleReasonOptions(checkbox) {
        if (checkbox.checked) {
            $('#reasonOptions').show();
        } else {
            $('#reasonOptions').hide();
        }
    }
    function openOfferStatusModal(button) {
        var offerId = $(button).data("offer-id");

        Swal.fire({
            title: 'Teklif Durumunu Güncelle',
            input: 'select',
            inputOptions: {
                0: 'Müşteriye iletilmedi',
                1: 'Müşteriye iletildi',
                2: 'İşi aldık',
                3: 'İşi kaçırdık'
            },
            inputPlaceholder: 'Bir durum seçin',
            showCancelButton: true,
            confirmButtonText: 'Kaydet',
            cancelButtonText: 'İptal',
            buttonsStyling: false,
            customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger'
            },
            didOpen: () => {
                // Select öğesini modal açıldığında buluyoruz
                const selectElement = Swal.getPopup().querySelector('.swal2-select');
                if (selectElement) {
                    // Olayı stabilize etmek için requestAnimationFrame kullanıyoruz
                    requestAnimationFrame(() => {
                        selectElement.focus(); // Odaklanmayı sağla
                        selectElement.click(); // Açmak için tıklama tetikle
                    });
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                let selectedStatus = parseInt(result.value);
                if (selectedStatus === 3) {
                    openReasonSelectionModal(offerId, selectedStatus);
                } else {
                    saveOfferStatus(offerId, selectedStatus, null);
                }
            }
        });
    }


    function openReasonSelectionModal(offerId, status) {
        Swal.fire({
            title: 'İşi Neden Kaçırdınız?',
            input: 'select',
            inputOptions: {
                0: 'Fiyat Yüksek',
                1: 'Termin Uymadı',
                2: 'Kalite Yetersiz',
                3: 'Proje İptal',
                4: 'Mevcutla Devam'
            },
            inputPlaceholder: 'Bir neden seçin',
            showCancelButton: true,
            confirmButtonText: 'Kaydet',
            cancelButtonText: 'İptal',
            buttonsStyling: false,
            customClass: {
                confirmButton: 'btn btn-warning',
                cancelButton: 'btn btn-danger'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                let selectedReason = parseInt(result.value);
                saveOfferStatus(offerId, status, selectedReason);
            }
        });
    }

    function saveOfferStatus(offerId, status, reason) {
        $.ajax({
            url: '@Url.Action("UpdateOfferStatus", "Customer")',
            type: 'POST',
            data: {
                id: offerId,
                status: status,
                reason: reason
            },
            success: function (response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Başarılı',
                    text: response.message,
                    timer: 3000,
                    showConfirmButton: false
                });
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Hata',
                    text: 'Bir hata oluştu, lütfen tekrar deneyin.',
                    timer: 3000,
                    showConfirmButton: false
                });
            }
        });
    }
    // Satıra tıklanınca checkbox'ı işaretleyen fonksiyon
    document.querySelectorAll('tr').forEach(row => {
        row.addEventListener('click', function (event) {
            // Eğer tıklanan öğe checkbox değilse işlemi uygula
            if (!event.target.classList.contains('offer-checkbox')) {
                const checkbox = row.querySelector('.offer-checkbox');
                if (checkbox) {
                    checkbox.checked = !checkbox.checked; // Checkbox'ı işaretler veya işaretini kaldırır
                    // İsteğe bağlı olarak checkbox'ın değişim olayını tetikleyebilirsiniz
                    checkbox.dispatchEvent(new Event('change'));
                }
            }
        });
    });

    // Tüm checkbox'ları işaretlemek için selectAllOffers işlevi
    document.getElementById('selectAllOffers').addEventListener('change', function () {
        const checkboxes = document.querySelectorAll('.offer-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked; // Hepsini seçer veya seçimini kaldırır
        });
    });
    $(document).ready(function () {


        // Sayı girişini noktalı formatta göstermek için
        function formatInputWithDots(inputId) {
            document.getElementById(inputId).addEventListener('input', function (e) {
                let value = e.target.value.replace(/\./g, ''); // Noktaları kaldır
                // Yalnızca sayısal karakterleri kontrol et
                if (value !== '' && /^[0-9]+$/.test(value)) {
                    e.target.value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.'); // Üçlü gruplara böl ve nokta koy
                } else if (value === '') {
                    e.target.value = ''; // Eğer giriş boşsa hiçbir işlem yapma
                }
            });
        }

        // Hem orderQuantity hem de editOrderQuantity için formatlama işlevini uygula
        formatInputWithDots('orderQuantity');
        formatInputWithDots('recipeQuantity');
        formatInputWithDots('editOrderQuantity');

        // Form submit edilmeden önce noktaları kaldır
        $('form').on('submit', function (e) {
            // 'orderQuantity' ve 'editOrderQuantity' alanındaki noktaları temizle
            let orderQuantityInput = document.getElementById('orderQuantity');
            if (orderQuantityInput) {
                orderQuantityInput.value = orderQuantityInput.value.replace(/\./g, ''); // Noktaları kaldır ve backend'e temiz değer gönder
            }

            let editOrderQuantityInput = document.getElementById('editOrderQuantity');
            if (editOrderQuantityInput) {
                editOrderQuantityInput.value = editOrderQuantityInput.value.replace(/\./g, ''); // Noktaları kaldır ve backend'e temiz değer gönder
            }


            let recipeQuantityInput = document.getElementById('recipeQuantity');
            if (recipeQuantityInput) {
                recipeQuantityInput.value = recipeQuantityInput.value.replace(/\./g, ''); // Noktaları kaldır ve backend'e temiz değer gönder
            }



        });

        $('#Price').on('input', function () {
            var value = $(this).val();
            // Noktayı virgüle çevir
            value = value.replace(/\./g, ',');
            $(this).val(value);
            // Sadece sayılar, virgül ve nokta kabul et (maksimum 7 karakter, virgülden sonra en fazla 4 basamak)
            if (!/^\d{0,3}([.,]\d{0,5})?$/.test(value)) {
                $(this).val(value.slice(0, -1)); // Geçersiz karakter varsa son karakteri sil
            }
        });


        // Form submit edilmeden önce noktaları kaldır
        $('form').on('submit', function (e) {
            // 'orderQuantity' alanındaki noktaları temizle
            let input = document.getElementById('orderQuantity');
            if (input) {
                input.value = input.value.replace(/\./g, ''); // Noktaları kaldır ve backend'e temiz değer gönder
            }
        });
        $(document).ready(function () {
            $('#addOfferForm').on('submit', function (event) {
                event.preventDefault();

                var formData = new FormData(this);
                var $submitButton = $(this).find(':submit'); // Formdaki submit butonunu seç

                // CustomerId'yi formData'dan al
                var customerId = formData.get('CustomerId'); // FormData'dan CustomerId'yi al
                if (!customerId) {
                    Toastify({
                        text: "Lütfen bir müşteri seçiniz.",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                    return;
                }

                // İrtibat kontrolü yap
                $.ajax({
                    url: '/Customer/CheckCustomerContact',
                    type: 'POST',
                    data: { customerId: customerId },
                    success: function (response) {
                        if (!response.hasContact) {
                            Toastify({
                                text: "Bu müşteri için irtibat kaydı bulunmamaktadır. Lütfen önce irtibat ekleyiniz.",
                                duration: 5000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000",
                            }).showToast();
                            return; // Form gönderimini durdur
                        }

                        // Eğer irtibat kontrolü başarılıysa formu gönder
                        sendOfferForm(formData, $submitButton);
                    },
                    error: function () {
                        Toastify({
                            text: "İrtibat kontrolü yapılırken bir hata oluştu.",
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                });
            });
            function sendRecipeForm(formData, $submitButton, isForceCreate = false) {
    const recipeCustomerId = document.getElementById('recipeCustomerId').value;
    formData.set('CustomerId', recipeCustomerId);
    if (isForceCreate) {
        formData.set('ForceCreate', 'true');
    }

    $submitButton.prop('disabled', true);

    $.ajax({
        url: '/Customer/AddRecipe',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            if (response.success) {
    Swal.fire({
        icon: 'success',
        title: 'Başarılı!',
        text: 'Reçete başarıyla eklendi. Reçete detay sayfasına yönlendiriliyorsunuz.',
        timer: 2000,
        showConfirmButton: false
    });

    setTimeout(function () {
        window.location.href = '/erp/RecipeDetail/' + response.recipeId;
    }, 2000);
}
else {
                $submitButton.prop('disabled', false);

                if (response.recipeNameExists) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Aynı Adda Reçete Var',
                        text: response.message,
                        showCancelButton: true,
                        cancelButtonText: 'İptal',
                        confirmButtonText: 'Yine de Oluştur',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            sendRecipeForm(formData, $submitButton, true); // yeniden gönder, ForceCreate:true
                        }
                    });
                } else if (response.existingRecipeId) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Zaten Oluşturulmuş',
                        text: response.message,
                        showCancelButton: true,
                        cancelButtonText: 'İptal',
                        confirmButtonText: 'Reçete Detayına Git',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/erp/RecipeDetail/' + response.existingRecipeId;
                        }
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata',
                        text: response.message + (response.errors ? '\n' + response.errors.join('\n') : '')
                    });
                }
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            $submitButton.prop('disabled', false);
            Swal.fire({
                icon: 'error',
                title: 'Sunucu Hatası',
                html: `Bir hata oluştu:<br><code>${jqXHR.responseText}</code><br>(Status: ${textStatus}, Error: ${errorThrown})`
            });
        }
    });
}


            let activeOfferId = null; // Global değişken

// Sıfırdan yeni reçete butonu tıklanınca
$(document).on('click', '.new-recipe-btn', function () {
    activeOfferId = null;
    $('#addRecipeModal').removeAttr('data-offer-id'); // offerId temizleniyor
    $('#addRecipeModal').modal('show');
});

// Tekliften reçete oluşturuluyorsa
            // Form submit
            $('#addRecipeForm').on('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(this);
    const $submitButton = $(this).find(':submit');

    const customerId = formData.get('CustomerId');
    if (!customerId) {
        Toastify({
            text: "Lütfen bir müşteri seçiniz.",
            duration: 3000,
            gravity: "top",
            position: "right",
            backgroundColor: "#FF0000",
        }).showToast();
        return;
    }

    // ✅ Sadece tekliften oluşturuluyorsa offerId eklenir
    const modalOfferId = $('#addRecipeModal').attr('data-offer-id');
    if (modalOfferId) {
        formData.set('OfferId', modalOfferId);
    } else {
        formData.delete('OfferId'); // varsa bile kaldır
    }

    // İrtibat kontrolü
    $.ajax({
        url: '/Customer/CheckCustomerContact',
        type: 'POST',
        data: { customerId: customerId },
        success: function (response) {
            if (!response.hasContact) {
                Toastify({
                    text: "Bu müşteri için irtibat kaydı bulunmamaktadır. Lütfen önce irtibat ekleyiniz.",
                    duration: 5000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "#FF0000",
                }).showToast();
                return;
            }

            sendRecipeForm(formData, $submitButton);
        },
        error: function () {
            Toastify({
                text: "İrtibat kontrolü yapılırken bir hata oluştu.",
                duration: 5000,
                gravity: "top",
                position: "right",
                backgroundColor: "#FF0000",
            }).showToast();
        }
    });
});
            function sendOfferForm(formData, $submitButton) {
                // FormData'ya kamera dosyasını ekle (eğer varsa)
                const mobileCameraInput = document.getElementById('mobileCameraInput');
                if (mobileCameraInput.files.length > 0) {
                    formData.set('OfferPicture', mobileCameraInput.files[0]);
                }

                // Butonu devre dışı bırak
                $submitButton.prop('disabled', true);

                // AdditionalProcessing için ID'leri al ve formData'ya ekle
                var additionalProcessingIds = $('#AdditionalProcessing').select2('data').map(function (item) {
                    return parseInt(item.id);
                });

                additionalProcessingIds.forEach(function (id) {
                    formData.append('AdditionalProcessingIds', id);
                });

                // Proje İptal Select2 alanları için ID ve text değerlerini FormData'ya ekle
                appendSelect2TextAndIdToForm('paperInfo', 'PaperInfoId', 'PaperInfoName', formData);
                appendSelect2TextAndIdToForm('adhesiveInfo', 'AdhesiveInfoId', 'AdhesiveInfoName', formData);
                appendSelect2TextAndIdToForm('deliveryMethod', 'DeliveryMethodId', 'DeliveryMethodName', formData);
                appendSelect2TextAndIdToForm('orderMethod', 'OrderMethodId', 'OrderMethodName', formData);

                var isPrinted = $('#isPrinted').val();
                formData.append('IsPrinted', isPrinted);

                if (isPrinted === "true") {
                    var numberOfColors = $('#numberOfColors').val();
                    if (!numberOfColors) {
                        Toastify({
                            text: "Baskılı seçildiğinde renk sayısı boş olamaz.",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                        $submitButton.prop('disabled', false);
                        return;
                    }
                    formData.append('NumberOfColors', parseInt(numberOfColors));
                } else {
                    $('#numberOfColors').val('');
                    formData.append('NumberOfColors', 0);
                }

                // Ajax ile formu gönder
                $.ajax({
                    url: '/Customer/AddOffer',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            Toastify({
                                text: "Teklif başarıyla eklendi.",
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#4CAF50",
                            }).showToast();
                            if ($('#sendEmail').is(':checked')) {
                                submitForAdminReview(response.offerId);
                                localStorage.setItem('offerSubmitted', 'true');
                            }

                            // Sayfa yenilemeyi Toastify süresine göre başlat
                            setTimeout(function () {
                                location.reload();
                            }, 3000); // Toastify süresi bittiğinde sayfa yenileniyor
                        } else {
                            $submitButton.prop('disabled', false);
                            Toastify({
                                text: "Hata: " + response.message + (response.errors ? '\n' + response.errors.join('\n') : ''),
                                duration: 5000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000",
                            }).showToast();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $submitButton.prop('disabled', false);
                        Toastify({
                            text: "Bir hata oluştu: " + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                });
            }
        });
        $(document).on('select2:open', () => {
    setTimeout(() => {
        document.querySelector('.select2-container--open .select2-search__field')?.focus();
    }, 0);
});


        // Select2'den seçilen verileri (hem id hem de text) FormData'ya ekleyen fonksiyon
        function appendSelect2TextAndIdToForm(elementId, fieldIdName, fieldTextName, formData) {
            // Seçilen id değerini al
            var selectedId = $('#' + elementId).val();

            // Seçilen text değerini al
            var selectedText = $('#' + elementId + ' option:selected').text();

            // Eğer id değeri varsa formData'ya ekle
            if (selectedId && selectedId.length > 0) {
                formData.append(fieldIdName, selectedId); // ID değerini ekle
            }

            // Eğer text değeri varsa formData'ya ekle
            if (selectedText && selectedText.length > 0) {
                formData.append(fieldTextName, selectedText); // Text değerini ekle
            }
        }

    });

    // Select2'den seçilen verileri (text değerlerini) FormData'ya ekleyen fonksiyon
    function appendSelect2TextToForm(elementId, fieldName, formData) {
        var selectedValue = $('#' + elementId).val();
        if (selectedValue && selectedValue.length > 0) {
            formData.append(fieldName, selectedValue);
        }
    }



    document.addEventListener("DOMContentLoaded", function () {
        var recordRows = document.querySelectorAll("table.table-hover tbody tr");

        recordRows.forEach(function (row) {
            var statusCell = row.querySelector("td:nth-child(2) span");
            var status = statusCell ? statusCell.textContent.trim() : "";

            switch (status) {
                case "Visit Record":
                    statusCell.classList.add("status-ziyaret");
                    break;
                case "Phone Call Record":
                    statusCell.classList.add("status-telefon");
                    break;
                case "Email Record":
                    statusCell.classList.add("status-email");
                    break;
                case "Sample Record":
                    statusCell.classList.add("status-numune");
                    break;
                default:
                    if (statusCell) {
                        statusCell.classList.add("status-default");
                    }
                    break;
            }
        });
    });
    $(document).ready(function () {
        $('#paperInfo').on('input', function () {
            var selectedValue = $(this).val();
            $('#paperInfoText').val(selectedValue);
        });
    });
    function submitForAdminReview(offerId) {
        $.ajax({
            url: '/Customer/SubmitForAdminReview',
            type: 'POST',
            data: { offerId: offerId },
            success: function (adminResponse) {
                // Toastify ile başarı veya hata mesajı gösterme
                Toastify({
                    text: adminResponse.message,
                    duration: 3000, // 3 saniye gösterim süresi
                    // Kapatma düğmesi
                    gravity: "top", // Toast konumu üstte
                    position: "right", // Ortada konumlandırma
                    backgroundColor: adminResponse.success ? "#4CAF50" : "#FF0000", // Başarı için yeşil, hata için kırmızı renk
                }).showToast();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Toastify ile hata mesajı gösterme
                Toastify({
                    text: "Yönetici onayına gönderme sırasında bir hata oluştu: " + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                    duration: 5000, // 5 saniye gösterim süresi
                    // Kapatma düğmesi
                    gravity: "top", // Toast konumu üstte
                    position: "right", // Ortada konumlandırma
                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                }).showToast();
            }
        });

    }

    $('form[id^="submitForAdminReviewForm"]').on('submit', function (event) {
        event.preventDefault(); // Sayfanın yeniden yüklenmesini engeller
        var formData = $(this).serialize(); // Form verilerini alır

        $.ajax({
            url: '@Url.Action("SubmitForAdminReview", "Customer")',
            type: 'POST',
            data: formData,
            success: function (response) {
                // Yanıt başarılı ise
                if (response.success) {
                    // Toastify ile başarı mesajı gösterme
                    Toastify({
                        text: response.message,
                        duration: 3000, // 3 saniye gösterim süresi
                        // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                    }).showToast();

                    // Toast gösterim süresi bittikten sonra sayfayı yeniden yükler
                    setTimeout(function () {
                        window.location.reload(); // Sayfayı yeniden yükler
                    }, 1500);
                } else {
                    // Toastify ile hata mesajı gösterme
                    Toastify({
                        text: response.message,
                        duration: 5000, // 5 saniye gösterim süresi
                        // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Toastify ile hata mesajı gösterme
                Toastify({
                    text: "Bir hata oluştu: " + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                    duration: 5000, // 5 saniye gösterim süresi
                    // Kapatma düğmesi
                    gravity: "top", // Toast konumu üstte
                    position: "right", // Ortada konumlandırma
                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                }).showToast();
            }
        });

    }); $(document).ready(function () {
        $('.set-today-btn').on('click', function () {
            var $button = $(this);
            var recordId = $button.data('record-id');
            var isTodaySet = $button.data('is-today-set');
            var actualDate = isTodaySet ? null : new Date().toISOString().split('T')[0];

            $.ajax({
                url: '@Url.Action("SetActualDate", "Customer")',
                type: 'POST',
                data: { id: recordId, actualDate: actualDate },
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: isTodaySet ? "Gerçekleşme tarihi temizlendi." : "Gerçekleşme tarihi başarıyla güncellendi.",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();

                        // Durumu güncelle ve butonu değiştir
                        if (isTodaySet) {
                            // Tarihi temizle - "Bugün Gerçekleşti Olarak Ayarla" butonuna döndür
                            $button
                                .removeClass('btn-warning')
                                .addClass('btn-outline-dark')
                                .html('Bugün Gerçekleşti Olarak Ayarla <i class="fa fa-check" aria-hidden="true"></i>');
                            $button.data('is-today-set', false);
                        } else {
                            // Tarihi ayarla - Bugünün tarihi ve yeni stil ile güncelle
                            var today = new Date();
                            var day = String(today.getDate()).padStart(2, '0');
                            var month = String(today.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başladığı için +1 eklenir
                            var year = today.getFullYear();
                            var todayFormatted = day + '/' + month + '/' + year; // "dd/MM/yyyy" formatında

                            $button
                                .removeClass('btn-outline-dark')
                                .addClass('btn-warning')
                                .html(todayFormatted + ' <i class="fa fa-check-square" aria-hidden="true"></i>');
                            $button.data('is-today-set', true);
                        }
                    } else {
                        Toastify({
                            text: response.message,
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });



        $(".custom-file-input").on("change", function () {
            var file = this.files[0];
            if (file) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#OfferPicturePreview').attr('src', e.target.result).show();
                };
                reader.readAsDataURL(file);

                var fileName = $(this).val().split("\\").pop();
                var shortFileName = fileName.length > 20 ? fileName.substring(0, 20) + "..." : fileName;
                $(this).siblings(".custom-file-label").addClass("selected").html(shortFileName);
            }
        });
        // Telefon Kaydı Formu



        // Event listener for edit buttons
        $('.edit-record-button').on('click', function () {
            var recordId = $(this).data('record-id');
            var recordStatus = $(this).data('record-status');

            // Determine which modal to show based on status
            switch (recordStatus) {
                case "Ziyaret":
                    openVisitEditModal(recordId);
                    break;
                case "Telefon":
                    openPhoneCallEditModal(recordId);
                    break;
                case "Email":
                    openEmailEditModal(recordId); // Implement this similarly
                    break;
                case "Numune":
                    openSampleEditModal(recordId); // Implement this similarly
                    break;
                case "Görev":
                    openMissionEditModal(recordId); // Implement this similarly
                    break;
                default:
                    alert('Geçersiz kayıt türü!');
            }
        });

        function openVisitEditModal(recordId) {
            $.get('@Url.Action("GetRecord", "Customer")', { id: recordId })
                .done(function (data) {
                    if (data) {
                        $('#editVisitRecordId').val(data.id);
                        $('#editVisitPlannedDate').val(data.plannedDate);
                        $('#editVisitActualDate').val(data.actualDate);
                        $('#editVisitDescription').val(data.information);
                        $('#editVisitRecordModal').modal('show');
                    } else {
                        alert('Kayıt bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        }

        function openEmailEditModal(recordId) {
            $.get('@Url.Action("GetRecord", "Customer")', { id: recordId })
                .done(function (data) {
                    if (data) {
                        $('#editEmailRecordId').val(data.id);
                        $('#editEmailPlannedDate').val(data.plannedDate);
                        $('#editEmailActualDate').val(data.actualDate);
                        $('#editEmailDescription').val(data.information);
                        $('#editEmailRecordModal').modal('show');
                    } else {
                        alert('Kayıt bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        }

        function openPhoneCallEditModal(recordId) {
            $.get('@Url.Action("GetRecord", "Customer")', { id: recordId })
                .done(function (data) {
                    if (data) {
                        $('#editPhoneCallRecordId').val(data.id);
                        $('#editPhoneCallPlannedDate').val(data.plannedDate);
                        $('#editPhoneCallActualDate').val(data.actualDate);
                        $('#editPhoneCallDescription').val(data.information);
                        $('#editPhoneCallRecordModal').modal('show');
                    } else {
                        alert('Kayıt bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        }

        function openSampleEditModal(recordId) {
            $.get('@Url.Action("GetRecord", "Customer")', { id: recordId })
                .done(function (data) {
                    if (data) {
                        $('#editSampleId').val(data.id);
                        $('#editSamplePlannedDate').val(data.plannedDate);
                        $('#editSampleActualDate').val(data.actualDate);
                        $('#editSampleDescription').val(data.information);
                        $('#editSampleRecordModal').modal('show');
                    } else {
                        alert('Kayıt bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        } function openMissionEditModal(recordId) {
            $.get('@Url.Action("GetRecord", "Customer")', { id: recordId })
                .done(function (data) {
                    if (data) {
                        $('#editMissionId').val(data.id);
                        $('#editMissionPlannedDate').val(data.plannedDate);
                        $('#editMissionActualDate').val(data.actualDate);
                        $('#editMissionDescription').val(data.information);
                        $('#editMissionModal').modal('show');
                    } else {
                        alert('Kayıt bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        }




        $(".custom-file-input").on("change", function () {
            var file = this.files[0];
            if (file) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#editOfferPicturePreview').attr('src', e.target.result).show();
                };
                reader.readAsDataURL(file);

                var fileName = $(this).val().split("\\").pop();
                var shortFileName = fileName.length > 20 ? fileName.substring(0, 20) + "..." : fileName;
                $(this).siblings(".custom-file-label").addClass("selected").html(shortFileName);
            }
        });
        $(document).on('click', '.download-pdf-button', function () {
            var offerId = $(this).data('offer-id'); // Butondan offer ID'sini al
            var $button = $(this); // Butonu seç

            // Butonu 3 saniye boyunca devre dışı bırak (spam tıklamalarını engellemek için)
            $button.prop('disabled', true);
            setTimeout(function () {
                $button.prop('disabled', false); // 3 saniye sonra butonu tekrar aktif hale getir
            }, 3000);

            // PDF indirme işlemi için AJAX kullanma (isteğe bağlı)
            $.ajax({
                url: '/customer/DownloadPdf', // PDF indirme URL'si
                type: 'GET',
                data: { offerId: offerId }, // ID'yi URL'ye ekle
                xhrFields: {
                    responseType: 'blob' // PDF gibi binary dosyalar için gerekli
                },
                success: function (data, status, xhr) {
                    // İndirme işlemi başarılıysa dosyayı indir
                    var blob = new Blob([data], { type: 'application/pdf' });
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = `Teklif_${offerId}.pdf`;
                    link.click();

                    // Toastify ile başarı mesajı gösterme
                    Toastify({
                        text: "PDF başarıyla indirildi.",
                        duration: 3000, // 3 saniye gösterim süresi
                        close: false, // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                    }).showToast();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Hata mesajını Toastify ile gösterme
                    Toastify({
                        text: "PDF indirilemedi: " + textStatus + ", " + errorThrown,
                        duration: 5000, // 5 saniye gösterim süresi
                        close: false, // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            });
        });
        $('#editOfferModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var offerId = button.data('offer-id');
            var customerId = button.data('customer-id');

            $('#editOfferId').val(offerId);
            $('#editCustomerId').val(customerId);

            // AdditionalProcessing verilerini Select2'ye yükle
            $.get('/customer/GetAdditionalProcessings', function (allProcessings) {
                var select2Data = allProcessings.map(function (item) {
                    return { id: item.id.toString(), text: item.name };
                });

                // Select2 öğesini oluştur
                $('#editAdditionalProcessing').select2({
                    data: select2Data,
                    placeholder: "İlave İşlem Seçiniz",
                    allowClear: true,
                    multiple: true,
                    width: '100%'
                });

                // Mevcut teklif verilerini al ve form alanlarına yükle
                $.get(`/customer/GetOfferById/${offerId}`, function (data) {
                    if (data) {
                        $('#editWidth').val(data.width);
                        $('#editHeight').val(data.height);
                        $('#editDescription').val(data.description);

                        // Kağıt ve tutkal bilgilerini ayarlama
                        setSelect2Option('#editPaperInfo', data.paperInfo.id, data.paperInfo.name);
                        setSelect2Option('#editAdhesiveInfo', data.adhesiveInfo.id, data.adhesiveInfo.name);

                        // Baskı durumu ayarlanması
                        $('#editisPrinted').val(data.isPrinted.toString()); // Değeri string olarak ayarlıyoruz
                        edittoggleColorOptions(); // Renk seçeneklerini güncelle

                        // Renk sayısını ayarlama
                        $('#editnumberOfColors').val(data.numberOfColors || ''); // Eğer yoksa boş bırak

                        // Sipariş, teslimat ve ödeme yöntemlerini ayarlama
                        setSelect2Option('#editOrderMethod', data.orderMethod.id, data.orderMethod.name);
                        setSelect2Option('#editDeliveryMethod', data.deliveryMethod.id, data.deliveryMethod.name);
                        $('#editPaymentTerm').val(data.paymentTerm || ''); // Payment term boş olabilir
                        setSelect2Option('#editPaymentMethod', data.paymentMethod, data.paymentMethod);

                        // Fiyat ve sipariş miktarını ayarlama
                        $('#Price').val(data.price ? data.price.toString().replace(/\./g, ',') : '');
                        $('#Price').val(data.price ? data.price.toString().replace(/\./g, ',') : '');
                        $('#editOrderQuantity').val(data.orderQuantity ? data.orderQuantity.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.') : '');

                        // AdditionalProcessing değerlerini Select2'ye yükle
                        var selectedIds = data.additionalProcessings ? data.additionalProcessings.map(item => item.id) : [];
                        $('#editAdditionalProcessing').val(selectedIds).trigger('change');

                        // Para birimi seçimini ayarlama
                        if (data.currency) {
                            $('input[name="Currency"][value="' + data.currency + '"]').prop('checked', true);
                        }

                        // Teklif resmini önizleme
                        if (data.offerPicture) {
                            $('#editOfferPicturePreview').attr('src', data.offerPicture).show();
                        } else {
                            $('#editOfferPicturePreview').hide();
                        }
                    }
                });
            });
        });

        // Baskılı durumu değiştiğinde renk seçeneklerini güncelle
        $('#editisPrinted').on('change', function () {
            edittoggleColorOptions();
        });
        // Select2'ye yeni seçenek ekleme ve seçili yapma fonksiyonu
        function setSelect2Option(selector, id, text) {
            var optionExists = $(selector).find(`option[value='${id}']`).length > 0;
            if (optionExists) {
                $(selector).val(id).trigger('change');
            } else {
                var newOption = new Option(text, id, true, true);
                $(selector).append(newOption).trigger('change');
            }
        }
        $('#editOfferForm').on('submit', function (e) {
            e.preventDefault();

            var formData = new FormData(this);
            var url = isCopy ? '/Customer/AddOffer' : '/Customer/UpdateOffer'; // `isCopy` true ise kopya, değilse güncelle

            // Baskı durumu, AdditionalProcessing ve Proje İptal Select2 alanlarını ekleyin
            var isPrinted = $('#editisPrinted').val() === "true";
            formData.append('IsPrinted', isPrinted);

            // AdditionalProcessing için ID'leri al ve formData'ya ekle
            var additionalProcessingIds = $('#editAdditionalProcessing').select2('data').map(function (item) {
                return parseInt(item.id);
            });
            additionalProcessingIds.forEach(function (id) {
                formData.append('AdditionalProcessingIds', id);
            });

            // Renk sayısı kontrolü ve ekleme
            if (isPrinted) {
                var numberOfColors = $('#editnumberOfColors').val();
                if (!numberOfColors) {
                    Toastify({
                        text: "Baskılı seçildiğinde renk sayısı boş olamaz.",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                    return;
                }
                formData.append('NumberOfColors', parseInt(numberOfColors));
            } else {
                formData.append('NumberOfColors', 0);
            }

            // Teklif resmini ekle
            var offerPictureFile = $('#editOfferPicture')[0].files[0];
            if (offerPictureFile) {
                formData.append('OfferPicture', offerPictureFile);
            }

            // Proje İptal Select2 alanları için ID ve text değerlerini FormData'ya ekle
            appendSelect2TextAndIdToForm('editPaperInfo', 'PaperInfoId', 'PaperInfoName', formData);
            appendSelect2TextAndIdToForm('editAdhesiveInfo', 'AdhesiveInfoId', 'AdhesiveInfoName', formData);
            appendSelect2TextAndIdToForm('editDeliveryMethod', 'DeliveryMethodId', 'DeliveryMethodName', formData);
            appendSelect2TextAndIdToForm('editOrderMethod', 'OrderMethodId', 'OrderMethodName', formData);

            // AJAX ile formu gönder
            $.ajax({
                url: url,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: isCopy ? "Teklif başarıyla kopyalandı." : "Teklif başarıyla güncellendi.",
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();

                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        Toastify({
                            text: "Hata: " + response.message + (response.errors ? '\n' + response.errors.join('\n') : ''),
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });

        // Select2'den seçilen verileri (hem id hem de text) FormData'ya ekleyen fonksiyon
        function appendSelect2TextAndIdToForm(elementId, fieldIdName, fieldTextName, formData) {
            var selectedId = $('#' + elementId).val();
            var selectedText = $('#' + elementId + ' option:selected').text();

            if (selectedId) {
                formData.append(fieldIdName, selectedId); // ID değerini ekle
            } else {
                // Toastify ile hata mesajı gösterme
                Toastify({
                    text: fieldIdName + ' alanı zorunludur.',
                    duration: 3000, // 3 saniye gösterim süresi
                    // Kapatma düğmesi
                    gravity: "top", // Toast konumu üstte
                    position: "right", // Ortada konumlandırma
                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                }).showToast();
            }

            if (selectedText) {
                formData.append(fieldTextName, selectedText); // Text değerini ekle
            } else {
                // Toastify ile hata mesajı gösterme
                Toastify({
                    text: fieldTextName + ' alanı zorunludur.',
                    duration: 3000, // 3 saniye gösterim süresi
                    // Kapatma düğmesi
                    gravity: "top", // Toast konumu üstte
                    position: "right", // Ortada konumlandırma
                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                }).showToast();
            }
        }

        function deleteRecord(recordId, type) {
            var deleteUrl = '';
            var successMessage = '';
            var errorMessage = '';

            if (type === 'offer') {
                deleteUrl = '@Url.Action("DeleteOffer", "Customer")';
                successMessage = 'Teklif başarıyla silindi.';
                errorMessage = 'Teklif silinirken bir hata oluştu.';
            } else if (type === 'recipe') {
                deleteUrl = '@Url.Action("DeleteRecipe", "Customer")';
                successMessage = 'Reçete başarıyla silindi.';
                errorMessage = 'Reçete silinirken bir hata oluştu.';
            }

            Swal.fire({
                title: 'Bu kaydı silmek istediğinize emin misiniz?',
                text: "Bu işlem geri alınamaz!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'Hayır, vazgeç'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: deleteUrl,
                        type: 'POST',
                        data: { id: recordId },
                        success: function (result) {
                            if (result.success) {
                                Toastify({
                                    text: successMessage,
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#4CAF50",
                                }).showToast();

                                setTimeout(function () {
                                    location.reload();
                                }, 1500);
                            } else {
                                Toastify({
                                    text: "Silme işlemi yapılamadı: " + result.message,
                                    duration: 5000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#FF0000",
                                }).showToast();
                            }
                        },
                        error: function () {
                            Toastify({
                                text: errorMessage,
                                duration: 5000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000",
                            }).showToast();
                        }
                    });
                }
            });
        }
        // Teklif silme butonuna tıklayınca
        $(document).on('click', '.delete-offer', function () {
            var recordId = $(this).data('id');
            deleteRecord(recordId, 'offer'); // type: offer
        });

        // Reçete silme butonuna tıklayınca
        $(document).on('click', '.delete-recipe', function () {
            var recordId = $(this).data('id');
            deleteRecord(recordId, 'recipe'); // type: recipe
        });




        $('#editSampleRecordForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Editrecord", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        // Toastify ile başarı mesajı gösterme
                        Toastify({
                            text: "Numune başarıyla güncellendi.",
                            duration: 3000, // 3 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                        }).showToast();

                        // Sayfayı yenileme
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        // Toastify ile hata mesajı gösterme
                        Toastify({
                            text: errorMessages,
                            duration: 5000, // 5 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                        }).showToast();
                    }
                },
                error: function (jqXHR) {
                    // Toastify ile hata mesajı gösterme
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000, // 5 saniye gösterim süresi
                        // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            });
        });

        // Reusable function for form submission with Toastify notifications
        function handleFormSubmit(formSelector, recordType, actionUrl) {
            $(formSelector).on('submit', function (event) {
                event.preventDefault();
                var formData = $(this).serialize(); // Serialize the form data

                $.ajax({
                    url: actionUrl, // Use the provided action URL
                    type: 'POST',
                    data: formData + `&recordType=${recordType}`, // Add record type dynamically
                    success: function (response) {
                        if (response.success) {
                            // Show success message with Toastify
                            Toastify({
                                text: `${recordType} kaydı başarıyla eklendi.`,
                                duration: 3000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#4CAF50",
                            }).showToast();

                            // Reload page after 1 second
                            setTimeout(function () {
                                location.reload();
                            }, 1000);
                        } else {
                            // Display detailed error messages with Toastify
                            var errorMessages = response.errors.join("\n");
                            Toastify({
                                text: errorMessages,
                                duration: 5000,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000",
                            }).showToast();
                        }
                    },
                    error: function (jqXHR) {
                        // Handle any unexpected errors
                        Toastify({
                            text: "Bir hata oluştu: " + jqXHR.responseText,
                            duration: 5000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                });
            });
        }

        // Initialize form submissions for different record types
        $(document).ready(function () {
            handleFormSubmit('#visitRecordForm', 'Ziyaret', '@Url.Action("AddRecord", "Customer")');
            handleFormSubmit('#sampleRecordForm', 'Numune', '@Url.Action("AddRecord", "Customer")');
            handleFormSubmit('#emailRecordForm', 'Email', '@Url.Action("AddRecord", "Customer")');
            handleFormSubmit('#phoneCallRecordForm', 'Telefon', '@Url.Action("AddRecord", "Customer")');
            handleFormSubmit('#missionForm', 'Görev', '@Url.Action("AddRecord", "Customer")');
        });


        $('#editEmailRecordForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Editrecord", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "E-Posta kaydı başarıyla güncellendi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        Toastify({
                            text: errorMessages,
                            duration: 5000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });// Tüm Teklifleri Seçme İşlemi
        document.getElementById("selectAllOffers").addEventListener("change", function () {
            const isChecked = this.checked;
            const checkboxes = document.querySelectorAll('input[type="checkbox"].offer-checkbox');

            checkboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
            });
        });

        $('#editVisitRecordForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Editrecord", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Ziyaret kaydı başarıyla güncellendi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        Toastify({
                            text: errorMessages,
                            duration: 5000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });
        $('#editMissionForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Editrecord", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Görev başarıyla güncellendi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        Toastify({
                            text: errorMessages,
                            duration: 5000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });

        $('#editPhoneCallRecordForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("Editrecord", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Telefon kaydı başarıyla güncellendi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();
                        setTimeout(function () {
                            location.reload();
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        Toastify({
                            text: errorMessages,
                            duration: 5000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR) {
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });


        
    function normalize(str) {
        return str ? str.trim().toLocaleLowerCase('tr-TR') : '';
    }

    // Razor tarafında gelen şehir ve ilçe isimlerini escape etmeden al
    var selectedCity = "@Html.Raw(Model.Customer.City)";
    var selectedDistrict = "@Html.Raw(Model.Customer.District)";

    // Şehir dropdown'unu doldur
    $.get('@Url.Action("GetCities", "Customer")', function (data) {
        var cityDropdown = $('#editCustomerCity');
        cityDropdown.empty().append('<option value="">Seçiniz</option>'); // Varsayılan seçenek

        data.forEach(function (city) {
            cityDropdown.append($('<option>', {
                value: city,
                text: city,
                selected: normalize(city) === normalize(selectedCity)
            }));
        });

        // Şehir seçiliyse ilçeleri getir
        if (selectedCity) {
            loadDistricts(selectedCity, selectedDistrict);
        }
    });

    // Şehir seçildiğinde ilçeleri güncelle
    $('#editCustomerCity').change(function () {
        var cityName = $(this).val();
        if (cityName) {
            loadDistricts(cityName, null);
        } else {
            $('#editCustomerDistrict').empty().append('<option value="">Seçiniz</option>');
        }
    });

    // İlçe dropdown'unu doldur
    function loadDistricts(city, selectedDistrict) {
        $.get('@Url.Action("GetDistricts", "Customer")', { city: city })
            .done(function (data) {
                var districtDropdown = $('#editCustomerDistrict');
                districtDropdown.empty().append('<option value="">Seçiniz</option>'); // Varsayılan

                data.forEach(function (district) {
                    districtDropdown.append($('<option>', {
                        value: district,
                        text: district,
                        selected: normalize(district) === normalize(selectedDistrict)
                    }));
                });

                if (!selectedDistrict) {
                    districtDropdown.prop('selectedIndex', 0);
                }
            })
            .fail(function () {
                alert('İlçeler yüklenemedi. Lütfen daha sonra tekrar deneyin.');
            });
    }
        document.getElementById('selectAllOffers').addEventListener('change', function () {
            const checkboxes = document.querySelectorAll('.offer-checkbox');
            checkboxes.forEach((checkbox) => {
                checkbox.checked = this.checked;
            });
        });

        // Edit location modal show event
        $('#editLocationModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var locationId = button.data('location-id');

            console.log("Location ID for edit:", locationId); // Debugging

            $.get('@Url.Action("GetLocation", "Customer")', { id: locationId })
                .done(function (data) {
                    console.log("Received location data:", data); // Debugging
                    if (data) {
                        $('#editLocationId').val(data.id);
                        $('#editLocationCustomerId').val(data.customerId);
                        $('#editLocationDescription').val(data.description);
                        $('#editLocationAddress').val(data.address);
                    } else {
                        alert('Veri bulunamadı.');
                    }
                })
                .fail(function () {
                    alert('Veri yüklenemedi, lütfen tekrar deneyin.');
                });
        });

        $('#editContactModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget); // Button that triggered the modal
            var contactId = button.data('contact-id'); // Extract info from data-* attributes

            console.log("Contact ID for edit:", contactId); // Debugging

            // Make an AJAX request to get the contact data
            $.get('@Url.Action("GetContact", "Customer")', { id: contactId })
                .done(function (data) {
                    console.log("Received contact data:", data); // Debugging
                    if (data) {
                        // Populate the modal fields with the data
                        $('#editContactId').val(data.id);
                        $('#editContactCustomerId').val(data.customerId);
                        $('#editContactTitle').val(data.title);
                        $('#editContactFullName').val(data.fullName);
                        $('#editContactGender').val(data.gender);
                        $('#editContactPhoneNumber').val(data.phoneNumber);
                        $('#editContactEmail').val(data.email);
                    } else {
                        alert('Contact not found.');
                    }
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    console.error("Failed to load contact data:", jqXHR.responseText); // Debugging
                    alert('Failed to load contact data.');
                });
        });

        $('#editContactForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("EditContact", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        // Toastify ile başarı mesajı gösterme
                        Toastify({
                            text: "Güncelleme başarıyla gerçekleşti!",
                            duration: 3000, // 3 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                        }).showToast();

                        // Toast gösterim süresi bittikten sonra sayfayı yeniden yükler
                        setTimeout(function () {
                            location.reload(); // Sayfayı yenile
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join("\n") : response.message;
                        // Toastify ile hata mesajı gösterme
                        Toastify({
                            text: errorMessages,
                            duration: 5000, // 5 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Toastify ile hata mesajı gösterme
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText,
                        duration: 5000, // 5 saniye gösterim süresi
                        // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            });

        });

        // Edit location form submit
        $('#editLocationForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            $.ajax({
                url: '@Url.Action("EditLocation", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        // Toastify ile başarı mesajı gösterme
                        Toastify({
                            text: "Lokasyon başarıyla güncellendi.",
                            duration: 3000, // 3 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                        }).showToast();

                        // Toast gösterim süresi bittikten sonra sayfayı yeniden yükler
                        setTimeout(function () {
                            location.reload(); // Sayfayı yenile
                        }, 1500); // Bekleme süresini 1500 ms olarak ayarla
                    } else {
                        // Toastify ile hata mesajı gösterme
                        Toastify({
                            text: response.message,
                            duration: 5000, // 5 saniye gösterim süresi
                            // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Toastify ile hata mesajı gösterme
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                        duration: 5000, // 5 saniye gösterim süresi
                        // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            });

        });

        // Delete contact
        $(document).on('click', '.delete-contact', function () {
            var contactId = $(this).data('id');

            // Swal ile silme işlemi için onay al
            Swal.fire({
                title: 'Bu irtibatı silmek istediğinize emin misiniz?',
                text: "Bu işlem geri alınamaz!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'Hayır, vazgeç'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Eğer kullanıcı onayladıysa AJAX ile silme işlemini gerçekleştir
                    $.ajax({
                        url: '@Url.Action("DeleteContact", "Customer")',
                        type: 'POST',
                        data: { id: contactId },
                        success: function (result) {
                            if (result.success) {
                                // Toastify ile başarı mesajı gösterme
                                Toastify({
                                    text: "İrtibat başarıyla silindi.",
                                    duration: 3000, // 3 saniye gösterim süresi
                                    gravity: "top", // Toast konumu üstte
                                    position: "right", // Ortada konumlandırma
                                    backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                                }).showToast();

                                // Toast gösterim süresi bittikten sonra sayfayı yeniden yükler
                                setTimeout(function () {
                                    location.reload(); // Sayfayı yenile
                                }, 1500); // Bekleme süresini 3000 ms olarak ayarla
                            } else {
                                // Toastify ile hata mesajı gösterme
                                Toastify({
                                    text: "Silme işlemi yapılamadı: " + result.message,
                                    duration: 5000, // 5 saniye gösterim süresi
                                    // Kapatma düğmesi
                                    gravity: "top", // Toast konumu üstte
                                    position: "right", // Ortada konumlandırma
                                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                                }).showToast();
                            }
                        },
                        error: function (err) {
                            // Toastify ile hata mesajı gösterme
                            Toastify({
                                text: "İrtibat silinirken bir hata oluştu.",
                                duration: 5000, // 5 saniye gösterim süresi
                                // Kapatma düğmesi
                                gravity: "top", // Toast konumu üstte
                                position: "right", // Ortada konumlandırma
                                backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                            }).showToast();
                        }
                    });
                }
            });
        });



        // Delete record
        $(document).on('click', '.delete-record', function () {
            var recordId = $(this).data('id'); // Silinecek kaydın ID'sini al

            // SweetAlert ile onay penceresi göster
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu kaydı silmek istediğinizden emin misiniz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Eğer onay verilmişse AJAX isteği başlat
                    $.ajax({
                        url: '@Url.Action("DeleteRecord", "Customer")',
                        type: 'POST',
                        data: { id: recordId },
                        success: function (result) {
                            if (result.success) {
                                // Toastify ile başarı mesajı gösterme
                                Toastify({
                                    text: "Kayıt başarıyla silindi.",
                                    duration: 3000,

                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                                }).showToast();

                                setTimeout(function () {
                                    location.reload();
                                }, 1500); // Bekleme süresi 1500 ms
                            } else {
                                Toastify({
                                    text: "Silme işlemi yapılamadı: " + result.message,
                                    duration: 5000,

                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                                }).showToast();
                            }
                        },
                        error: function () {
                            Toastify({
                                text: "Kayıt silinirken bir hata oluştu.",
                                duration: 5000,

                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                            }).showToast();
                        }
                    });
                }
            });
        });


        // Lokasyon silme işlemi
        $(document).on('click', '.delete-location', function () {
            var locationId = $(this).data('id');

            // Swal ile silme işlemi için onay alın
            Swal.fire({
                title: 'Bu lokasyonu silmek istediğinize emin misiniz?',
                text: "Bu işlem geri alınamaz!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, sil!',
                cancelButtonText: 'Hayır, vazgeç'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Kullanıcı silme işlemini onayladıysa AJAX çağrısını yap
                    $.ajax({
                        url: '@Url.Action("DeleteLocation", "Customer")',
                        type: 'POST',
                        data: { id: locationId },
                        success: function (result) {
                            if (result.success) {
                                // Toastify ile başarı mesajı göster
                                Toastify({
                                    text: "Lokasyon başarıyla silindi.",
                                    duration: 3000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                                }).showToast();

                                // Toast gösterim süresi bittikten sonra sayfayı yeniden yükle
                                setTimeout(function () {
                                    location.reload();
                                }, 1500); // Bekleme süresi 3 saniye
                            } else {
                                // Toastify ile hata mesajı göster
                                Toastify({
                                    text: "Silme işlemi yapılamadı: " + result.message,
                                    duration: 5000,
                                    close: false,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                                }).showToast();
                            }
                        },
                        error: function () {
                            // Toastify ile hata mesajı göster
                            Toastify({
                                text: "Lokasyon silinirken bir hata oluştu.",
                                duration: 5000,
                                close: false,
                                gravity: "top",
                                position: "right",
                                backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                            }).showToast();
                        }
                    });
                }
            });
        });
        $('#editContactEmail').on('input', function () {
            var emailValue = $(this).val().toLowerCase(); // E-posta değerini küçük harfe çevir
            if (emailValue.includes('byb')) {
                showToast("'byb' kelimesini e-posta adresinde kullanamazsınız!", "#FF0000");
                $(this).val(emailValue.replace(/byb/gi, '')); // "byb" ifadesini kaldır
            }
        });

        $('#contactEmail').on('input', function () {
            var emailValue = $(this).val().toLowerCase(); // E-posta değerini küçük harfe çevir
            if (emailValue.includes('byb')) {
                showToast("'byb' kelimesini e-posta adresinde kullanamazsınız!", "#FF0000");
                $(this).val(emailValue.replace(/byb/gi, '')); // "byb" ifadesini kaldır
            }
        });
        $('#addContactForm').submit(function (event) {
            event.preventDefault();
            var emailValue = $('#contactEmail').val().toLowerCase();
            var contactData = $(this).serialize();
            var $submitButton = $(this).find(':submit');

            // 1️⃣ "byb" kontrolü
            if (emailValue.includes('byb')) {
                showToast("'byb' kelimesi e-posta adresinde bulunamaz!", "#FF0000");
                return false; // Form gönderimini durdur
            }

            // Submit butonunu devre dışı bırak
            $submitButton.prop('disabled', true);

            // 2️⃣ AJAX POST isteği
            $.post('/customer/AddContact', contactData, function (response) {
                if (response.success) {
                    showToast("İrtibat başarıyla eklendi.", "#4CAF50");
                    setTimeout(() => location.reload(), 1500);
                } else {
                    $submitButton.prop('disabled', false);
                    showToast(response.message, "#FF0000");
                }
            }).fail((jqXHR) => {
                $submitButton.prop('disabled', false);
                showToast("Bir hata oluştu: " + jqXHR.responseText, "#FF0000");
            });

            return false; // Form gönderimini durdur
        });




        // Toastify mesajını göstermek için yardımcı bir fonksiyon ekledik
        function showToast(message, backgroundColor = "#FF0000") {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: backgroundColor,
            }).showToast();
        }



        // Add location form submit
        // Lokasyon ekleme işlemi
        $('#addLocationForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();
            var $submitButton = $(this).find(':submit'); // Formdaki submit butonunu seç

            // Butonu devre dışı bırak
            $submitButton.prop('disabled', true);

            $.ajax({
                url: '@Url.Action("AddLocation", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Lokasyon başarıyla eklendi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#4CAF50",
                        }).showToast();

                        setTimeout(function () {
                            location.reload();
                        }, 1500); // Bekleme süresi 1500 ms
                    } else {
                        // Hata durumunda butonu tekrar aktif hale getir
                        $submitButton.prop('disabled', false);
                        Toastify({
                            text: response.message,
                            duration: 5000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#FF0000",
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Hata durumunda butonu tekrar aktif hale getir
                    $submitButton.prop('disabled', false);
                    Toastify({
                        text: "Bir hata oluştu: " + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                        duration: 5000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#FF0000",
                    }).showToast();
                }
            });
        });
        const textarea = document.getElementById("description");
        const wordLimit = 30;

        textarea.addEventListener("keydown", function (event) {
            const words = textarea.value.trim().split(/\s+/).filter(word => word.length > 0);

            if (words.length >= wordLimit && event.key !== "Backspace" && event.key !== "Delete") {
                event.preventDefault(); // Yeni tuş girişini durdur
                document.getElementById("wordCountMessage").style.display = "inline";
            } else {
                document.getElementById("wordCountMessage").style.display = "none";
            }
        });
        // Yeni sektör ekleme işlemi
        $('#addEditSectorButton').on('click', function () {
            var newSectorName = $('#editCustomerNewSector').val();
            if (newSectorName) {
                $.ajax({
                    url: '@Url.Action("AddSector", "Customer")',
                    type: 'POST',
                    data: { name: newSectorName },
                    success: function (result) {
                        if (result.success) {
                            Toastify({
                                text: "Sektör başarıyla eklendi.",
                                duration: 3000,
                                backgroundColor: "#4CAF50",

                                gravity: "top",
                                position: "right",
                            }).showToast();
                            $('#editCustomerSector').append(new Option(newSectorName, newSectorName));
                            $('#editCustomerNewSector').val('');
                        } else {
                            Toastify({
                                text: result.message,
                                duration: 3000,
                                backgroundColor: "#FF0000",

                                gravity: "top",
                                position: "right",
                            }).showToast();
                        }
                    },
                    error: function () {
                        Toastify({
                            text: "Sektör eklenirken bir hata oluştu.",
                            duration: 3000,
                            backgroundColor: "#FF0000",

                            gravity: "top",
                            position: "right",
                        }).showToast();
                    }
                });
            } else {
                Toastify({
                    text: "Lütfen yeni sektör adını girin.",
                    duration: 3000,
                    backgroundColor: "#FF0000",

                    gravity: "top",
                    position: "right",
                }).showToast();
            }
        });
        $('#deleteEditSectorButton').on('click', function () {
            var sectorName = $('#editCustomerSector').val();
            if (sectorName) {
                Swal.fire({
                    title: 'Emin misiniz?',
                    text: "Bu sektörü silmek istediğinize emin misiniz?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Evet, sil!',
                    cancelButtonText: 'İptal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '@Url.Action("DeleteSectorByName", "Customer")',
                            type: 'POST',
                            data: { name: sectorName },
                            success: function (result) {
                                if (result.success) {
                                    Toastify({
                                        text: "Sektör başarıyla silindi.",
                                        duration: 3000,
                                        gravity: "top",
                                        position: "right",
                                        backgroundColor: "#4CAF50",
                                    }).showToast();

                                    setTimeout(function () {
                                        $('#editCustomerSector option[value="' + sectorName + '"]').remove();
                                    }, 1500); // 1500 ms bekleme süresi
                                } else {
                                    Toastify({
                                        text: "Silme işlemi yapılamadı: " + result.message,
                                        duration: 5000,
                                        gravity: "top",
                                        position: "right",
                                        backgroundColor: "#FF0000",
                                    }).showToast();
                                }
                            },
                            error: function () {
                                Toastify({
                                    text: "Sektör silinirken bir hata oluştu.",
                                    duration: 5000,
                                    gravity: "top",
                                    position: "right",
                                    backgroundColor: "#FF0000",
                                }).showToast();
                            }
                        });
                    }
                });
            } else {
                Toastify({
                    text: "Lütfen silmek istediğiniz sektörü seçin.",
                    duration: 3000,
                    backgroundColor: "#FF0000",
                    gravity: "top",
                    position: "right",
                }).showToast();
            }
        });


        $('#createdById').change(function () {
            var selectedUserName = $('#createdById option:selected').text();
            console.log('Selected User Name:', selectedUserName); // Debugging
            $('#createdBy').val(selectedUserName);
        });

        $('#editCustomerCreatedByForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();

            // Butonun ID'sini veya sınıfını seçiyoruz.
            const submitButton = $("#submitButton"); // submitButton yerine kendi buton ID veya class'ınızı yazın.

            $.ajax({
                url: '@Url.Action("EditCustomerCreatedBy", "Customer")',
                type: 'POST',
                data: formData,
                beforeSend: function () {
                    // AJAX başlamadan önce butonu disable yapıyoruz.
                    submitButton.prop('disabled', true);
                },
                success: function (response) {
                    if (response.success) {
                        Toastify({
                            text: "Müşteri sorumlusu başarıyla değiştirildi.",
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#28a745",
                            stopOnFocus: true
                        }).showToast();

                        setTimeout(function () {
                            location.reload(); // 3 saniye sonra sayfayı yenile
                        }, 1500);
                    } else {
                        var errorMessages = response.errors ? response.errors.join(", ") : response.message;
                        Toastify({
                            text: errorMessages,
                            duration: 3000,

                            gravity: "top",
                            position: "right",
                            backgroundColor: "#dc3545",
                            stopOnFocus: true
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    Toastify({
                        text: 'Bir hata oluştu: ' + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                        duration: 3000,

                        gravity: "top",
                        position: "right",
                        backgroundColor: "#dc3545",
                        stopOnFocus: true
                    }).showToast();
                },
                complete: function () {
                    // AJAX tamamlandıktan sonra butonu 3 saniye sonra tekrar aktif hale getiriyoruz.
                    setTimeout(function () {
                        submitButton.prop('disabled', false);
                    }, 1500);
                }
            });

        });

        $('#editCustomerForm').on('submit', function (event) {
            event.preventDefault();
            var formData = $(this).serialize();
            $.ajax({
                url: '@Url.Action("EditCustomer", "Customer")',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        // Toastify ile başarı mesajı gösterme
                        Toastify({
                            text: "Müşteri bilgileri başarıyla güncellendi.",
                            duration: 3000, // Mesajın 3000 ms (3 saniye) boyunca gösterilmesi
                            close: false, // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#4CAF50", // Başarı mesajı için yeşil renk
                        }).showToast();

                        // 1.5 saniye bekleyip sayfayı yenile
                        setTimeout(function () {
                            location.reload();
                        }, 1500); // Bekleme süresi 1500 ms
                    } else {
                        var errorMessages = response.errors ? response.errors.join(", ") : response.message;

                        // Toastify ile hata mesajı gösterme
                        Toastify({
                            text: "Hata: " + errorMessages,
                            duration: 5000, // Mesajın 5000 ms (5 saniye) boyunca gösterilmesi
                            close: false, // Kapatma düğmesi
                            gravity: "top", // Toast konumu üstte
                            position: "right", // Ortada konumlandırma
                            backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                        }).showToast();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Toastify ile genel hata mesajı gösterme
                    Toastify({
                        text: 'Bir hata oluştu: ' + jqXHR.responseText + " (Status: " + textStatus + ", Error: " + errorThrown + ")",
                        duration: 5000, // Mesajın 5000 ms (5 saniye) boyunca gösterilmesi
                        close: false, // Kapatma düğmesi
                        gravity: "top", // Toast konumu üstte
                        position: "right", // Ortada konumlandırma
                        backgroundColor: "#FF0000", // Hata mesajı için kırmızı renk
                    }).showToast();
                }
            });
        });


    });
</script>